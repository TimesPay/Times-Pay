{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["React","Animated","View","StyleSheet","color","RadioButtonContext","handlePress","isChecked","TouchableRipple","withTheme","BORDER_WIDTH","RadioButtonAndroid","state","borderAnim","Value","radioAnim","prevProps","status","props","setValue","timing","toValue","duration","start","disabled","onPress","theme","value","rest","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","context","checked","contextValue","fade","undefined","onValueChange","styles","container","radio","borderColor","borderWidth","absoluteFill","radioContainer","dot","backgroundColor","transform","scale","Component","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  borderAnim: Animated.Value;\n  radioAnim: Animated.Value;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonAndroid extends React.Component<Props, State> {\n  static displayName = 'RadioButton.Android';\n\n  state = {\n    borderAnim: new Animated.Value(BORDER_WIDTH),\n    radioAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    if (this.props.status === 'checked') {\n      this.state.radioAnim.setValue(1.2);\n\n      Animated.timing(this.state.radioAnim, {\n        toValue: 1,\n        duration: 150,\n      }).start();\n    } else {\n      this.state.borderAnim.setValue(10);\n\n      Animated.timing(this.state.borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150,\n      }).start();\n    }\n  }\n\n  render() {\n    const { disabled, onPress, theme, value, status, ...rest } = this.props;\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor: string, radioColor: string;\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          const checked =\n            isChecked({\n              contextValue: context && context.value,\n              status,\n              value,\n            }) === 'checked';\n\n          if (disabled) {\n            rippleColor = color(theme.colors.text)\n              .alpha(0.16)\n              .rgb()\n              .string();\n            radioColor = theme.colors.disabled;\n          } else {\n            rippleColor = color(checkedColor)\n              .fade(0.32)\n              .rgb()\n              .string();\n            radioColor = checked ? checkedColor : uncheckedColor;\n          }\n\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      handlePress({\n                        onPress,\n                        onValueChange: context && context.onValueChange,\n                        value,\n                      });\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityStates={disabled ? ['disabled'] : []}\n              accessibilityLiveRegion=\"polite\"\n              style={styles.container}\n            >\n              <Animated.View\n                style={[\n                  styles.radio,\n                  {\n                    borderColor: radioColor,\n                    borderWidth: this.state.borderAnim,\n                  },\n                ]}\n              >\n                {checked ? (\n                  <View\n                    style={[StyleSheet.absoluteFill, styles.radioContainer]}\n                  >\n                    <Animated.View\n                      style={[\n                        styles.dot,\n                        {\n                          backgroundColor: radioColor,\n                          transform: [{ scale: this.state.radioAnim }],\n                        },\n                      ]}\n                    />\n                  </View>\n                ) : null}\n              </Animated.View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nexport { RadioButtonAndroid };\n"]}