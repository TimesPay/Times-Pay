{"version":3,"sources":["CheckboxAndroid.tsx"],"names":["ANIMATION_DURATION","CheckboxAndroid","state","scaleAnim","Animated","Value","prevProps","status","props","checked","animation","theme","sequence","timing","toValue","duration","scale","start","disabled","onPress","rest","indeterminate","checkedColor","color","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","checkboxColor","fade","borderWidth","interpolate","inputRange","outputRange","icon","styles","container","transform","StyleSheet","absoluteFill","fillContainer","fill","borderColor","React","Component","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  scaleAnim: Animated.Value;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxAndroid extends React.Component<Props, State> {\n  static displayName = 'Checkbox.Android';\n\n  state = {\n    scaleAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    const checked = this.props.status === 'checked';\n    const { animation } = this.props.theme;\n\n    Animated.sequence([\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * animation.scale : 0,\n      }),\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * animation.scale\n          : ANIMATION_DURATION * animation.scale * 1.75,\n      }),\n    ]).start();\n  }\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor, checkboxColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n      checkboxColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n      checkboxColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    const borderWidth = this.state.scaleAnim.interpolate({\n      inputRange: [0.8, 1],\n      outputRange: [7, 0],\n    });\n\n    const icon = indeterminate\n      ? 'minus-box'\n      : checked\n      ? 'checkbox-marked'\n      : 'checkbox-blank-outline';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <Animated.View style={{ transform: [{ scale: this.state.scaleAnim }] }}>\n          <Icon\n            allowFontScaling={false}\n            source={icon}\n            size={24}\n            color={checkboxColor}\n          />\n          <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n            <Animated.View\n              style={[\n                styles.fill,\n                { borderColor: checkboxColor },\n                { borderWidth },\n              ]}\n            />\n          </View>\n        </Animated.View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nexport { CheckboxAndroid };\n"]}