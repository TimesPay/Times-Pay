{"version":3,"sources":["index.js"],"names":["SKIP","Symbol","module","exports","rewire","babel","options","t","types","require","mappings","name","index","visitor","ImportDeclaration","path","node","source","value","replaceWithMultiple","specifiers","reduce","declarations","specifier","mapping","imported","alias","identifier","local","s","importDefaultSpecifier","importNamespaceSpecifier","importSpecifier","push","importDeclaration","stringLiteral","previous","find","d","requeue"],"mappings":"AAAA,GAAMA,CAAAA,IAAI,CAAGC,MAAM,CAAC,MAAD,CAAnB,CAEAC,MAAM,CAACC,OAAP,CAAiB,QAASC,CAAAA,MAAT,CAAgBC,KAAhB,CAAuBC,OAAvB,CAAgC,CAC/C,GAAMC,CAAAA,CAAC,CAAGF,KAAK,CAACG,KAAhB,CAD+C,aAGbC,OAAO,CAACH,OAAO,CAACI,QAAR,EACxC,qBADuC,CAHM,CAGvCC,IAHuC,UAGvCA,IAHuC,CAGjCC,KAHiC,UAGjCA,KAHiC,CAG1BF,QAH0B,UAG1BA,QAH0B,CAM/C,MAAO,CACLG,OAAO,CAAE,CACPC,iBADO,4BACWC,IADX,CACiB,CACtB,GAAIA,IAAI,CAACC,IAAL,CAAUC,MAAV,CAAiBC,KAAjB,GAA2BP,IAA3B,EAAmCI,IAAI,CAACC,IAAL,CAAUhB,IAAV,CAAvC,CAAwD,CACtD,OACD,CAEDe,IAAI,CAACC,IAAL,CAAUC,MAAV,CAAiBC,KAAjB,CAA4BP,IAA5B,KAAoCC,KAApC,CACAG,IAAI,CAACI,mBAAL,CACEJ,IAAI,CAACC,IAAL,CAAUI,UAAV,CAAqBC,MAArB,CAA4B,SAACC,YAAD,CAAeC,SAAf,CAA6B,CACvD,GAAMC,CAAAA,OAAO,CAAGd,QAAQ,CAACa,SAAS,CAACE,QAAV,CAAmBd,IAApB,CAAxB,CAEA,GAAIa,OAAJ,CAAa,CACX,GAAME,CAAAA,KAAK,CAAMf,IAAN,KAAca,OAAO,CAACT,IAAjC,CACA,GAAMY,CAAAA,UAAU,CAAGpB,CAAC,CAACoB,UAAF,CAAaJ,SAAS,CAACK,KAAV,CAAgBjB,IAA7B,CAAnB,CAEA,GAAIkB,CAAAA,CAAJ,CAEA,OAAQL,OAAO,CAACb,IAAhB,EACE,IAAK,SAAL,CACEkB,CAAC,CAAGtB,CAAC,CAACuB,sBAAF,CAAyBH,UAAzB,CAAJ,CACA,MACF,IAAK,GAAL,CACEE,CAAC,CAAGtB,CAAC,CAACwB,wBAAF,CAA2BJ,UAA3B,CAAJ,CACA,MACF,QACEE,CAAC,CAAGtB,CAAC,CAACyB,eAAF,CAAkBL,UAAlB,CAA8BpB,CAAC,CAACoB,UAAF,CAAaH,OAAO,CAACb,IAArB,CAA9B,CAAJ,CARJ,CAWAW,YAAY,CAACW,IAAb,CACE1B,CAAC,CAAC2B,iBAAF,CAAoB,CAACL,CAAD,CAApB,CAAyBtB,CAAC,CAAC4B,aAAF,CAAgBT,KAAhB,CAAzB,CADF,EAGD,CApBD,IAoBO,CACL,GAAMU,CAAAA,QAAQ,CAAGd,YAAY,CAACe,IAAb,CACf,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACrB,MAAF,CAASC,KAAT,GAAmBH,IAAI,CAACC,IAAL,CAAUC,MAAV,CAAiBC,KAAxC,EADc,CAAjB,CAIA,GAAIkB,QAAJ,CAAc,CACZA,QAAQ,CAAChB,UAAT,CAAoBa,IAApB,CAAyBV,SAAzB,EACD,CAFD,IAEO,CACL,GAAMP,CAAAA,IAAI,CAAGT,CAAC,CAAC2B,iBAAF,CAAoB,CAACX,SAAD,CAApB,CAAiCR,IAAI,CAACC,IAAL,CAAUC,MAA3C,CAAb,CACAD,IAAI,CAAChB,IAAD,CAAJ,CAAa,IAAb,CACAsB,YAAY,CAACW,IAAb,CAAkBjB,IAAlB,EACD,CACF,CAED,MAAOM,CAAAA,YAAP,CACD,CAtCD,CAsCG,EAtCH,CADF,EA0CAP,IAAI,CAACwB,OAAL,GACD,CAlDM,CADJ,CAAP,CAsDD,CA5DD","sourcesContent":["const SKIP = Symbol('SKIP');\n\nmodule.exports = function rewire(babel, options) {\n  const t = babel.types;\n\n  const { name, index, mappings } = require(options.mappings ||\n    '../../mappings.json');\n\n  return {\n    visitor: {\n      ImportDeclaration(path) {\n        if (path.node.source.value !== name || path.node[SKIP]) {\n          return;\n        }\n\n        path.node.source.value = `${name}/${index}`;\n        path.replaceWithMultiple(\n          path.node.specifiers.reduce((declarations, specifier) => {\n            const mapping = mappings[specifier.imported.name];\n\n            if (mapping) {\n              const alias = `${name}/${mapping.path}`;\n              const identifier = t.identifier(specifier.local.name);\n\n              let s;\n\n              switch (mapping.name) {\n                case 'default':\n                  s = t.importDefaultSpecifier(identifier);\n                  break;\n                case '*':\n                  s = t.importNamespaceSpecifier(identifier);\n                  break;\n                default:\n                  s = t.importSpecifier(identifier, t.identifier(mapping.name));\n              }\n\n              declarations.push(\n                t.importDeclaration([s], t.stringLiteral(alias))\n              );\n            } else {\n              const previous = declarations.find(\n                d => d.source.value === path.node.source.value\n              );\n\n              if (previous) {\n                previous.specifiers.push(specifier);\n              } else {\n                const node = t.importDeclaration([specifier], path.node.source);\n                node[SKIP] = true;\n                declarations.push(node);\n              }\n            }\n\n            return declarations;\n          }, [])\n        );\n\n        path.requeue();\n      },\n    },\n  };\n};\n"]}