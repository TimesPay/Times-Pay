{"version":3,"sources":["createMaterialTopTabNavigator.tsx"],"names":["MaterialTabView","_renderLazyPlaceholder","props","LazyPlaceholder","lazyPlaceholderComponent","_renderTabBar","state","navigation","route","routes","index","descriptors","descriptor","key","options","tabBarVisible","getLabelText","getAccessibilityLabel","getTestID","renderIcon","onTabPress","onTabLongPress","tabBarComponent","TabBarComponent","MaterialTopTabBar","tabBarPosition","tabBarOptions","screenProps","rest","swipeEnabled","React","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleProp, ViewStyle } from 'react-native';\nimport { TabView, SceneRendererProps } from 'react-native-tab-view';\nimport createTabNavigator, {\n  NavigationViewProps,\n} from '../utils/createTabNavigator';\nimport MaterialTopTabBar from '../views/MaterialTopTabBar';\nimport {\n  NavigationTabProp,\n  NavigationMaterialTabOptions,\n  MaterialTabBarOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Route = {\n  key: string;\n  routeName: string;\n};\n\ntype Config = {\n  keyboardDismissMode?: 'none' | 'on-drag';\n  swipeEnabled?: boolean;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold?: number;\n  initialLayout?: { width?: number; height?: number };\n  lazy?: boolean;\n  lazyPlaceholderComponent?: React.ComponentType<{ route: Route }>;\n  tabBarComponent?: React.ComponentType<any>;\n  tabBarOptions?: MaterialTabBarOptions;\n  tabBarPosition?: 'top' | 'bottom';\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype Props = NavigationViewProps &\n  Config & {\n    onSwipeStart?: () => void;\n    onSwipeEnd?: () => void;\n    navigation: NavigationTabProp;\n    descriptors: SceneDescriptorMap;\n    screenProps?: unknown;\n  };\n\nclass MaterialTabView extends React.PureComponent<Props> {\n  _renderLazyPlaceholder = (props: { route: Route }) => {\n    const { lazyPlaceholderComponent: LazyPlaceholder } = this.props;\n\n    if (LazyPlaceholder != null) {\n      return <LazyPlaceholder {...props} />;\n    }\n\n    return null;\n  };\n\n  _renderTabBar = (props: SceneRendererProps) => {\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    const tabBarVisible =\n      options.tabBarVisible == null ? true : options.tabBarVisible;\n\n    const {\n      navigation,\n      getLabelText,\n      getAccessibilityLabel,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n      tabBarComponent: TabBarComponent = MaterialTopTabBar,\n      tabBarPosition,\n      tabBarOptions,\n      screenProps,\n    } = this.props;\n\n    if (TabBarComponent === null || !tabBarVisible) {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...tabBarOptions}\n        {...props}\n        tabBarPosition={tabBarPosition}\n        screenProps={screenProps}\n        navigation={navigation}\n        getLabelText={getLabelText}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getTestID={getTestID}\n        renderIcon={renderIcon}\n        onTabPress={onTabPress}\n        onTabLongPress={onTabLongPress}\n      />\n    );\n  };\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      getLabelText,\n      getAccessibilityLabel,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n      screenProps,\n      lazyPlaceholderComponent,\n      tabBarComponent,\n      tabBarOptions,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      navigation,\n      descriptors,\n      ...rest\n    } = this.props;\n\n    const { state } = navigation;\n    const route = state.routes[state.index];\n\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    let swipeEnabled =\n      // @ts-ignore\n      options.swipeEnabled == null\n        ? this.props.swipeEnabled\n        : (options as any).swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    return (\n      <TabView\n        {...rest}\n        navigationState={navigation.state}\n        swipeEnabled={swipeEnabled}\n        renderTabBar={this._renderTabBar}\n        renderLazyPlaceholder={this._renderLazyPlaceholder}\n      />\n    );\n  }\n}\n\nexport default createTabNavigator<Config, NavigationMaterialTabOptions, Props>(\n  MaterialTabView\n);\n"]}