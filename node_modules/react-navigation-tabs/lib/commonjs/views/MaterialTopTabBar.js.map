{"version":3,"sources":["MaterialTopTabBar.tsx"],"names":["TabBarTop","_renderLabel","route","focused","color","props","showLabel","upperCaseLabel","labelStyle","allowFontScaling","label","getLabelText","styles","toUpperCase","tintColor","_renderIcon","renderIcon","showIcon","iconStyle","icon","navigation","activeTintColor","inactiveTintColor","tabBarPosition","screenProps","rest","state","React","PureComponent","defaultProps","StyleSheet","create","height","width","textAlign","fontSize","margin","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport Animated from 'react-native-reanimated';\nimport { NavigationRoute } from 'react-navigation';\nimport { MaterialTabBarProps } from '../types';\n\ntype Scene = { route: NavigationRoute; focused: boolean; color: string };\n\nexport default class TabBarTop extends React.PureComponent<\n  MaterialTabBarProps\n> {\n  static defaultProps = {\n    activeTintColor: 'rgba(255, 255, 255, 1)',\n    inactiveTintColor: 'rgba(255, 255, 255, 0.7)',\n    showIcon: false,\n    showLabel: true,\n    upperCaseLabel: true,\n    allowFontScaling: true,\n  };\n\n  _renderLabel = ({ route, focused, color }: Scene) => {\n    const {\n      showLabel,\n      upperCaseLabel,\n      labelStyle,\n      allowFontScaling,\n    } = this.props;\n\n    if (showLabel === false) {\n      return null;\n    }\n\n    const label = this.props.getLabelText({ route });\n\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text\n          style={[styles.label, { color }, labelStyle]}\n          allowFontScaling={allowFontScaling}\n        >\n          {upperCaseLabel ? label.toUpperCase() : label}\n        </Animated.Text>\n      );\n    }\n\n    if (typeof label === 'function') {\n      return label({ focused, tintColor: color });\n    }\n\n    return label;\n  };\n\n  _renderIcon = ({ route, focused, color }: Scene) => {\n    const { renderIcon, showIcon, iconStyle } = this.props;\n\n    if (showIcon === false) {\n      return null;\n    }\n\n    return (\n      <View style={[styles.icon, iconStyle]}>\n        {renderIcon({\n          route,\n          focused,\n          tintColor: color,\n        })}\n      </View>\n    );\n  };\n\n  render() {\n    const {\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      renderIcon,\n      getLabelText,\n      allowFontScaling,\n      showLabel,\n      showIcon,\n      upperCaseLabel,\n      tabBarPosition,\n      screenProps,\n      iconStyle,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n\n    return (\n      <TabBar\n        {...rest}\n        activeColor={activeTintColor}\n        inactiveColor={inactiveTintColor}\n        navigationState={navigation.state}\n        renderIcon={this._renderIcon}\n        renderLabel={this._renderLabel}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]}