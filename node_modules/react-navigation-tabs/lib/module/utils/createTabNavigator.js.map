{"version":3,"sources":["createTabNavigator.tsx"],"names":["React","TabRouter","StackActions","SceneView","createNavigator","SwitchActions","createTabNavigator","TabView","NavigationView","_renderScene","route","props","screenProps","descriptors","descriptor","key","TabComponent","getComponent","navigation","_renderIcon","focused","tintColor","horizontal","options","tabBarIcon","_getLabelText","tabBarLabel","title","routeName","_getAccessibilityLabel","tabBarAccessibilityLabel","label","routes","state","indexOf","length","undefined","_getTestID","tabBarTestID","_makeDefaultHandler","isFocused","hasOwnProperty","index","dispatch","popToTop","emit","_jumpTo","_handleTabPress","_isTabPress","Promise","resolve","then","defaultHandler","tabBarOnPress","_handleTabLongPress","tabBarOnLongPress","_handleIndexChange","jumpTo","navigationConfig","Component","config","router"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TabRouter,\n  StackActions,\n  SceneView,\n  createNavigator,\n  SwitchActions,\n  NavigationRoute,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationTabRouterConfig,\n} from 'react-navigation';\nimport {\n  NavigationTabProp,\n  NavigationCommonTabOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype RouteConfig<Options> = NavigationRouteConfigMap<\n  Options,\n  NavigationTabProp<NavigationRoute, any>\n>;\n\ntype CommonProps = {\n  navigation: NavigationTabProp;\n  descriptors: SceneDescriptorMap;\n  screenProps?: unknown;\n};\n\ntype ExtraProps<Config extends {}> = {\n  navigationConfig: Config;\n};\n\nexport type RenderIconProps = {\n  route: NavigationRoute;\n  focused: boolean;\n  tintColor?: string;\n  horizontal?: boolean;\n};\n\nexport type NavigationViewProps = {\n  getLabelText: (props: { route: NavigationRoute }) => string | undefined;\n  getAccessibilityLabel: (props: {\n    route: NavigationRoute;\n  }) => string | undefined;\n  getTestID: (props: { route: NavigationRoute }) => string | undefined;\n  renderIcon: (props: RenderIconProps) => React.ReactNode;\n  renderScene: (props: { route: NavigationRoute }) => React.ReactNode;\n  onIndexChange: (index: number) => void;\n  onTabPress: (props: { route: NavigationRoute }) => void;\n  onTabLongPress: (props: { route: NavigationRoute }) => void;\n};\n\nexport default function createTabNavigator<\n  Config extends {},\n  Options extends NavigationCommonTabOptions,\n  Props extends NavigationViewProps & CommonProps\n>(TabView: React.ComponentType<Props & Config & Options>) {\n  class NavigationView extends React.Component<\n    Exclude<Props, NavigationViewProps> & ExtraProps<Config>\n  > {\n    _renderScene = ({ route }: { route: { key: string } }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return (\n        <SceneView\n          screenProps={screenProps}\n          navigation={descriptor.navigation}\n          component={TabComponent}\n        />\n      );\n    };\n\n    _renderIcon = ({\n      route,\n      focused,\n      tintColor,\n      horizontal = false,\n    }: RenderIconProps) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function'\n          ? options.tabBarIcon({ focused, tintColor, horizontal })\n          : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _getAccessibilityLabel = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n        return options.tabBarAccessibilityLabel;\n      }\n\n      const label = this._getLabelText({ route });\n\n      if (typeof label === 'string') {\n        const { routes } = this.props.navigation.state;\n        return `${label}, tab, ${routes.indexOf(route) + 1} of ${\n          routes.length\n        }`;\n      }\n\n      return undefined;\n    };\n\n    _getTestID = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarTestID;\n    };\n\n    _makeDefaultHandler = ({\n      route,\n      navigation,\n    }: {\n      route: NavigationRoute;\n      navigation: NavigationTabProp;\n    }) => () => {\n      if (navigation.isFocused()) {\n        if (route.hasOwnProperty('index') && route.index > 0) {\n          // If current tab has a nested navigator, pop to top\n          navigation.dispatch(StackActions.popToTop({ key: route.key }));\n        } else {\n          navigation.emit('refocus');\n        }\n      } else {\n        this._jumpTo(route.routeName);\n      }\n    };\n\n    _handleTabPress = ({ route }: { route: NavigationRoute }) => {\n      this._isTabPress = true;\n\n      // After tab press, handleIndexChange will be called synchronously\n      // So we reset it in promise callback\n      Promise.resolve().then(() => (this._isTabPress = false));\n\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleTabLongPress = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnLongPress) {\n        options.tabBarOnLongPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleIndexChange = (index: number) => {\n      if (this._isTabPress) {\n        this._isTabPress = false;\n        return;\n      }\n\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\n    };\n\n    _jumpTo = (routeName: string) => {\n      const { navigation } = this.props;\n\n      navigation.dispatch(\n        SwitchActions.jumpTo({\n          routeName,\n          key: navigation.state.key,\n        })\n      );\n    };\n\n    _isTabPress: boolean = false;\n\n    render() {\n      const {\n        descriptors,\n        navigation,\n        screenProps,\n        navigationConfig,\n      } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n\n      return (\n        // TODO: don't have time to fix it right now\n        // @ts-ignore\n        <TabView\n          {...navigationConfig}\n          {...descriptor.options}\n          getLabelText={this._getLabelText}\n          getAccessibilityLabel={this._getAccessibilityLabel}\n          getTestID={this._getTestID}\n          renderIcon={this._renderIcon}\n          renderScene={this._renderScene}\n          onIndexChange={this._handleIndexChange}\n          onTabPress={this._handleTabPress}\n          onTabLongPress={this._handleTabLongPress}\n          navigation={navigation}\n          descriptors={descriptors}\n          screenProps={screenProps}\n        />\n      );\n    }\n  }\n\n  return (\n    routes: RouteConfig<Options>,\n    config: CreateNavigatorConfig<\n      Partial<Config>,\n      NavigationTabRouterConfig,\n      Partial<Options>,\n      NavigationTabProp<NavigationRoute, any>\n    > = {}\n  ) => {\n    const router = TabRouter(routes, config as any);\n\n    return createNavigator(NavigationView as any, router, config as any);\n  };\n}\n"]}