{"version":3,"sources":["createMaterialBottomTabNavigator.tsx"],"names":["React","TabRouter","StackActions","SceneView","createNavigator","SwitchActions","MaterialBottomTabView","createMaterialBottomTabNavigator","routes","config","NavigationView","_renderScene","route","props","screenProps","descriptors","descriptor","key","TabComponent","getComponent","navigation","_renderIcon","focused","tintColor","horizontal","options","tabBarIcon","_getLabelText","tabBarLabel","title","routeName","_getAccessibilityLabel","tabBarAccessibilityLabel","label","state","indexOf","length","undefined","_getTestID","tabBarTestID","_getBadge","tabBarBadge","_makeDefaultHandler","isFocused","hasOwnProperty","index","dispatch","popToTop","emit","_jumpTo","_handleTabPress","_isTabPress","Promise","resolve","then","defaultHandler","tabBarOnPress","_handleIndexChange","jumpTo","navigationConfig","Component","router"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TabRouter,\n  StackActions,\n  SceneView,\n  createNavigator,\n  SwitchActions,\n  NavigationProp,\n  NavigationScreenProp,\n  NavigationRoute,\n  NavigationDescriptor,\n  NavigationRouteConfigMap,\n  NavigationParams,\n  CreateNavigatorConfig,\n  NavigationTabRouterConfig,\n} from 'react-navigation';\nimport MaterialBottomTabView from '../views/MaterialBottomTabView';\nimport {\n  NavigationMaterialBottomTabOptions,\n  NavigationTabState,\n  NavigationMaterialBottomTabConfig,\n  NavigationTabProp,\n} from '../types';\n\nexport type RenderIconProps = {\n  route: NavigationRoute<any>;\n  focused: boolean;\n  tintColor?: string;\n  horizontal?: boolean;\n};\n\nexport type NavigationViewProps = {\n  navigation: NavigationProp<NavigationTabState>;\n  descriptors: {\n    [key: string]: NavigationDescriptor<\n      NavigationParams,\n      NavigationMaterialBottomTabOptions,\n      NavigationTabProp\n    >;\n  };\n  screenProps?: unknown;\n  navigationConfig: any;\n  getLabelText: (props: { route: NavigationRoute }) => string | undefined;\n  getAccessibilityLabel: (props: {\n    route: NavigationRoute;\n  }) => string | undefined;\n  getTestID: (props: { route: NavigationRoute }) => string | undefined;\n  renderIcon: (props: RenderIconProps) => React.ReactNode;\n  renderScene: (props: { route: NavigationRoute }) => React.ReactNode;\n  onIndexChange: (index: number) => void;\n  onTabPress: (props: { route: NavigationRoute }) => void;\n};\n\nexport default function createMaterialBottomTabNavigator(\n  routes: NavigationRouteConfigMap<\n    NavigationMaterialBottomTabOptions,\n    NavigationTabProp<NavigationRoute, any>\n  >,\n  config: CreateNavigatorConfig<\n    NavigationMaterialBottomTabConfig,\n    NavigationTabRouterConfig,\n    NavigationMaterialBottomTabOptions,\n    NavigationTabProp<NavigationRoute, any>\n  > = {}\n) {\n  class NavigationView extends React.Component<NavigationViewProps> {\n    _renderScene = ({ route }: { route: { key: string } }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return (\n        <SceneView\n          screenProps={screenProps}\n          navigation={descriptor.navigation}\n          component={TabComponent}\n        />\n      );\n    };\n\n    _renderIcon = ({\n      route,\n      focused,\n      tintColor,\n      horizontal = false,\n    }: RenderIconProps) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function'\n          ? options.tabBarIcon({ focused, tintColor, horizontal })\n          : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _getAccessibilityLabel = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n        return options.tabBarAccessibilityLabel;\n      }\n\n      const label = this._getLabelText({ route });\n\n      if (typeof label === 'string') {\n        const { routes } = this.props.navigation.state;\n        return `${label}, tab, ${routes.indexOf(route) + 1} of ${\n          routes.length\n        }`;\n      }\n\n      return undefined;\n    };\n\n    _getTestID = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarTestID;\n    };\n\n    _getBadge = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarBadge;\n    };\n\n    _makeDefaultHandler = ({\n      route,\n      navigation,\n    }: {\n      route: NavigationRoute;\n      navigation: NavigationScreenProp<any>;\n    }) => () => {\n      if (navigation.isFocused()) {\n        if (route.hasOwnProperty('index') && route.index > 0) {\n          // If current tab has a nested navigator, pop to top\n          navigation.dispatch(StackActions.popToTop({ key: route.key }));\n        } else {\n          // @ts-ignore\n          navigation.emit('refocus');\n        }\n      } else {\n        this._jumpTo(route.routeName);\n      }\n    };\n\n    _handleTabPress = ({ route }: { route: NavigationRoute }) => {\n      this._isTabPress = true;\n\n      // After tab press, handleIndexChange will be called synchronously\n      // So we reset it in promise callback\n      Promise.resolve().then(() => (this._isTabPress = false));\n\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleIndexChange = (index: number) => {\n      if (this._isTabPress) {\n        this._isTabPress = false;\n        return;\n      }\n\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\n    };\n\n    _jumpTo = (routeName: string) => {\n      const { navigation } = this.props;\n\n      navigation.dispatch(\n        SwitchActions.jumpTo({\n          routeName,\n          key: navigation.state.key,\n        })\n      );\n    };\n\n    _isTabPress: boolean = false;\n\n    render() {\n      const {\n        descriptors,\n        navigation,\n        screenProps,\n        navigationConfig,\n      } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n      const options = {\n        ...navigationConfig,\n        ...descriptor.options,\n      };\n\n      return (\n        <MaterialBottomTabView\n          {...options}\n          getLabelText={this._getLabelText}\n          getAccessibilityLabel={this._getAccessibilityLabel}\n          getTestID={this._getTestID}\n          getBadge={this._getBadge}\n          renderIcon={this._renderIcon}\n          renderScene={this._renderScene}\n          onIndexChange={this._handleIndexChange}\n          onTabPress={this._handleTabPress}\n          navigation={navigation}\n          descriptors={descriptors}\n          screenProps={screenProps}\n        />\n      );\n    }\n  }\n\n  const router = TabRouter(routes, config as any);\n\n  // TODO: don't have time to fix it right now\n  // @ts-ignore\n  return createNavigator(NavigationView, router, config as any);\n}\n"]}