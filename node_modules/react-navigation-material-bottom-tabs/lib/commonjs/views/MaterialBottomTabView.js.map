{"version":3,"sources":["MaterialBottomTabView.tsx"],"names":["MaterialBottomTabView","_getColor","route","descriptors","props","descriptor","key","options","context","tabBarColorDark","tabBarColorLight","tabBarColor","_getactiveColor","activeColor","activeColorLight","activeColorDark","_getInactiveColor","inactiveColor","inactiveColorLight","inactiveColorDark","_getBarStyle","barStyle","barStyleLight","barStyleDark","_renderIcon","focused","color","renderIcon","tintColor","navigation","state","routes","index","tabBarVisible","rest","isVisible","_isVisible","extraStyle","display","position","undefined","React","Component","contextType","ThemeContext"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ThemeContext,\n  NavigationProp,\n  NavigationDescriptor,\n} from 'react-navigation';\nimport { BottomNavigation } from 'react-native-paper';\nimport { NavigationMaterialBottomTabConfig } from '../types';\nimport { ViewStyle } from 'react-native';\n\ntype Options = {\n  tabBarVisible?: boolean;\n  tabBarColor?: string;\n  tabBarColorLight?: string;\n  tabBarColorDark?: string;\n};\n\ntype Props = React.ComponentProps<typeof BottomNavigation> &\n  NavigationMaterialBottomTabConfig & {\n    navigation: NavigationProp<any>;\n    descriptors: { [key: string]: NavigationDescriptor<any, Options> };\n    screenProps?: unknown;\n    renderIcon: (options: {\n      route: { key: string };\n      focused: boolean;\n      tintColor: string;\n    }) => React.ReactNode;\n  };\n\nexport default class MaterialBottomTabView extends React.Component<Props> {\n  static contextType = ThemeContext;\n\n  _getColor = ({ route }: { route: { key: string } }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (this.context === 'dark' && options.tabBarColorDark) {\n      return options.tabBarColorDark;\n    } else if (options.tabBarColorLight) {\n      return options.tabBarColorLight;\n    } else {\n      return options.tabBarColor;\n    }\n  };\n\n  _getactiveColor = () => {\n    let { activeColor, activeColorLight, activeColorDark } = this.props;\n\n    if (this.context === 'dark' && activeColorDark) {\n      return activeColorDark;\n    } else if (activeColorLight) {\n      return activeColorLight;\n    } else {\n      return activeColor;\n    }\n  };\n\n  _getInactiveColor = () => {\n    let { inactiveColor, inactiveColorLight, inactiveColorDark } = this.props;\n\n    if (this.context === 'dark' && inactiveColorDark) {\n      return inactiveColorDark;\n    } else if (inactiveColorLight) {\n      return inactiveColorLight;\n    } else {\n      return inactiveColor;\n    }\n  };\n\n  _getBarStyle = () => {\n    let { barStyle, barStyleLight, barStyleDark } = this.props;\n\n    return [barStyle, this.context === 'dark' ? barStyleDark : barStyleLight];\n  };\n\n  _isVisible() {\n    const { navigation, descriptors } = this.props;\n    const { state } = navigation;\n    const route = state.routes[state.index];\n    const options = descriptors[route.key].options;\n    return options.tabBarVisible;\n  }\n\n  _renderIcon = ({\n    route,\n    focused,\n    color,\n  }: {\n    route: { key: string };\n    focused: boolean;\n    color: string;\n  }) => {\n    return this.props.renderIcon({ route, focused, tintColor: color });\n  };\n\n  render() {\n    const {\n      navigation,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors,\n      ...rest\n    } = this.props;\n\n    const activeColor = this._getactiveColor();\n    const inactiveColor = this._getInactiveColor();\n    const barStyle = this._getBarStyle();\n\n    const isVisible = this._isVisible();\n    const extraStyle: ViewStyle | null =\n      isVisible === false\n        ? {\n            display: 'none',\n            // When keyboard is shown, `position` is set to `absolute` in the library\n            // This somehow breaks `display: 'none'`, so we explcitely override `position`\n            position: undefined,\n          }\n        : null;\n\n    return (\n      <BottomNavigation\n        // Pass these for backward compaibility\n        {...rest}\n        activeColor={activeColor}\n        inactiveColor={inactiveColor}\n        renderIcon={this._renderIcon}\n        barStyle={[barStyle, extraStyle]}\n        navigationState={navigation.state}\n        getColor={this._getColor}\n      />\n    );\n  }\n}\n"]}