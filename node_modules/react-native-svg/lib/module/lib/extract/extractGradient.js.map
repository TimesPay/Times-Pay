{"version":3,"sources":["extractGradient.ts"],"names":["React","Children","extractColor","extractOpacity","extractTransform","units","percentReg","percentToFloat","percent","__getAnimatedValue","matched","match","console","warn","offsetComparator","object","other","extractGradient","props","parent","id","children","gradientTransform","transform","gradientUnits","stops","childArray","map","child","cloneElement","l","length","i","style","offset","stopColor","stopOpacity","offsetNumber","color","isNaN","alpha","Math","round","push","sort","gradient","k","j","s","name"],"mappings":"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","sourcesContent":["import React, { Children, ReactElement } from 'react';\n\nimport extractColor from './extractColor';\nimport extractOpacity from './extractOpacity';\nimport extractTransform from './extractTransform';\nimport { TransformProps } from './types';\nimport units from '../units';\n\nconst percentReg = /^([+\\-]?\\d+(?:\\.\\d+)?(?:[eE][+\\-]?\\d+)?)(%?)$/;\n\nfunction percentToFloat(\n  percent:\n    | number\n    | string\n    | {\n        __getAnimatedValue: () => number;\n      },\n): number {\n  if (typeof percent === 'number') {\n    return percent;\n  }\n  if (\n    typeof percent === 'object' &&\n    typeof percent.__getAnimatedValue === 'function'\n  ) {\n    return percent.__getAnimatedValue();\n  }\n  const matched = typeof percent === 'string' && percent.match(percentReg);\n  if (!matched) {\n    console.warn(`\"${percent}\" is not a valid number or percentage string.`);\n    return 0;\n  }\n\n  return matched[2] ? +matched[1] / 100 : +matched[1];\n}\n\nconst offsetComparator = (object: number[], other: number[]) =>\n  object[0] - other[0];\n\nexport default function extractGradient(\n  props: {\n    id?: string;\n    children?: ReactElement[];\n    transform?: number[] | string | TransformProps;\n    gradientTransform?: number[] | string | TransformProps;\n    gradientUnits?: 'objectBoundingBox' | 'userSpaceOnUse';\n  } & TransformProps,\n  parent: {},\n) {\n  const { id, children, gradientTransform, transform, gradientUnits } = props;\n  if (!id) {\n    return null;\n  }\n\n  const stops = [];\n  const childArray = children\n    ? Children.map(children, child =>\n        React.cloneElement(child, {\n          parent,\n        }),\n      )\n    : [];\n  const l = childArray.length;\n  for (let i = 0; i < l; i++) {\n    const {\n      props: {\n        style,\n        offset = style && style.offset,\n        stopColor = (style && style.stopColor) || '#000',\n        stopOpacity = style && style.stopOpacity,\n      },\n    } = childArray[i];\n    const offsetNumber = percentToFloat(offset || 0);\n    const color = stopColor && extractColor(stopColor);\n    if (typeof color !== 'number' || isNaN(offsetNumber)) {\n      console.warn(\n        `\"${stopColor}\" is not a valid color or \"${offset}\" is not a valid offset`,\n      );\n      continue;\n    }\n    const alpha = Math.round(extractOpacity(stopOpacity) * 255);\n    stops.push([offsetNumber, (color & 0x00ffffff) | (alpha << 24)]);\n  }\n  stops.sort(offsetComparator);\n\n  const gradient = [];\n  const k = stops.length;\n  for (let j = 0; j < k; j++) {\n    const s = stops[j];\n    gradient.push(s[0], s[1]);\n  }\n\n  return {\n    name: id,\n    gradient,\n    children: childArray,\n    gradientUnits: (gradientUnits && units[gradientUnits]) || 0,\n    gradientTransform: extractTransform(\n      gradientTransform || transform || props,\n    ),\n  };\n}\n"]}