import _toConsumableArray from"@babel/runtime/helpers/toConsumableArray";import _defineProperty from"@babel/runtime/helpers/defineProperty";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import extractFill from'./extractFill';import extractStroke from'./extractStroke';import{transformToMatrix,props2transform}from'./extractTransform';import extractResponder from'./extractResponder';import extractOpacity from'./extractOpacity';import{idPattern}from'../util';var clipRules={evenodd:0,nonzero:1};export function propsAndStyles(props){var style=props.style;return!style?props:_objectSpread({},Array.isArray(style)?Object.assign.apply(Object,[{}].concat(_toConsumableArray(style))):style,{},props);}function getMarker(marker){if(!marker){return undefined;}var matched=marker.match(idPattern);return matched?matched[1]:undefined;}export default function extractProps(props,ref){var opacity=props.opacity,onLayout=props.onLayout,id=props.id,clipPath=props.clipPath,clipRule=props.clipRule,mask=props.mask,marker=props.marker,_props$markerStart=props.markerStart,markerStart=_props$markerStart===void 0?marker:_props$markerStart,_props$markerMid=props.markerMid,markerMid=_props$markerMid===void 0?marker:_props$markerMid,_props$markerEnd=props.markerEnd,markerEnd=_props$markerEnd===void 0?marker:_props$markerEnd,transform=props.transform;var styleProperties=[];var transformProps=props2transform(props);var matrix=transformToMatrix(transformProps,transform);var extracted=_objectSpread({matrix:matrix},transformProps,{propList:styleProperties,opacity:extractOpacity(opacity)},extractResponder(props,ref),{},extractFill(props,styleProperties),{},extractStroke(props,styleProperties));if(onLayout){extracted.onLayout=onLayout;}if(markerStart){extracted.markerStart=getMarker(markerStart);}if(markerMid){extracted.markerMid=getMarker(markerMid);}if(markerEnd){extracted.markerEnd=getMarker(markerEnd);}if(id){extracted.name=String(id);}if(clipPath){if(clipRule){extracted.clipRule=clipRules[clipRule]===0?0:1;}if(clipPath){var matched=clipPath.match(idPattern);if(matched){extracted.clipPath=matched[1];}else{console.warn('Invalid `clipPath` prop, expected a clipPath like "#id", but got: "'+clipPath+'"');}}}if(mask){var _matched=mask.match(idPattern);if(_matched){extracted.mask=_matched[1];}else{console.warn('Invalid `mask` prop, expected a mask like "#id", but got: "'+mask+'"');}}return extracted;}export function extract(instance,props){return extractProps(propsAndStyles(props),instance);}export function withoutXY(instance,props){return extractProps(_objectSpread({},propsAndStyles(props),{x:null,y:null}),instance);}
//# sourceMappingURL=extractProps.js.map