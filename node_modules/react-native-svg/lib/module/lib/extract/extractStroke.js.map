{"version":3,"sources":["extractStroke.ts"],"names":["extractBrush","extractOpacity","extractLengthList","caps","butt","square","round","joins","miter","bevel","vectorEffects","none","default","nonScalingStroke","inherit","uri","extractStroke","props","styleProperties","stroke","strokeOpacity","strokeLinecap","strokeLinejoin","strokeDasharray","strokeWidth","strokeDashoffset","strokeMiterlimit","vectorEffect","push","strokeDash","length","concat","parseFloat"],"mappings":"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","sourcesContent":["import extractBrush from './extractBrush';\nimport extractOpacity from './extractOpacity';\nimport extractLengthList from './extractLengthList';\nimport { StrokeProps } from './types';\n\nconst caps = {\n  butt: 0,\n  square: 2,\n  round: 1,\n};\n\nconst joins = {\n  miter: 0,\n  bevel: 2,\n  round: 1,\n};\n\nconst vectorEffects = {\n  none: 0,\n  default: 0,\n  nonScalingStroke: 1,\n  'non-scaling-stroke': 1,\n  inherit: 2,\n  uri: 3,\n};\n\nexport default function extractStroke(\n  props: StrokeProps,\n  styleProperties: string[],\n) {\n  const {\n    stroke,\n    strokeOpacity,\n    strokeLinecap,\n    strokeLinejoin,\n    strokeDasharray,\n    strokeWidth,\n    strokeDashoffset,\n    strokeMiterlimit,\n    vectorEffect,\n  } = props;\n\n  if (stroke != null) {\n    styleProperties.push('stroke');\n  }\n  if (strokeWidth != null) {\n    styleProperties.push('strokeWidth');\n  }\n  if (strokeOpacity != null) {\n    styleProperties.push('strokeOpacity');\n  }\n  if (strokeDasharray != null) {\n    styleProperties.push('strokeDasharray');\n  }\n  if (strokeDashoffset != null) {\n    styleProperties.push('strokeDashoffset');\n  }\n  if (strokeLinecap != null) {\n    styleProperties.push('strokeLinecap');\n  }\n  if (strokeLinejoin != null) {\n    styleProperties.push('strokeLinejoin');\n  }\n  if (strokeMiterlimit != null) {\n    styleProperties.push('strokeMiterlimit');\n  }\n\n  const strokeDash =\n    !strokeDasharray || strokeDasharray === 'none'\n      ? null\n      : extractLengthList(strokeDasharray);\n\n  return {\n    stroke: extractBrush(stroke),\n    strokeOpacity: extractOpacity(strokeOpacity),\n    strokeLinecap: (strokeLinecap && caps[strokeLinecap]) || 0,\n    strokeLinejoin: (strokeLinejoin && joins[strokeLinejoin]) || 0,\n    strokeDasharray:\n      strokeDash && strokeDash.length % 2 === 1\n        ? strokeDash.concat(strokeDash)\n        : strokeDash,\n    strokeWidth: strokeWidth != null ? strokeWidth : 1,\n    strokeDashoffset:\n      strokeDasharray && strokeDashoffset ? +strokeDashoffset || 0 : null,\n    strokeMiterlimit:\n      (strokeMiterlimit && typeof strokeMiterlimit !== 'number'\n        ? parseFloat(strokeMiterlimit)\n        : strokeMiterlimit) || 4,\n    vectorEffect: (vectorEffect && vectorEffects[vectorEffect]) || 0,\n  };\n}\n"]}