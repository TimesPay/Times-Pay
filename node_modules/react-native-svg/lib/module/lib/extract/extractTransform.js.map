{"version":3,"sources":["extractTransform.ts"],"names":["append","appendTransform","identity","reset","toArray","parse","appendTransformProps","props","x","y","originX","originY","scaleX","scaleY","rotation","skewX","skewY","universal2axis","universal","axisX","axisY","defaultValue","coords","split","length","Array","isArray","isNaN","props2transform","translate","translateX","translateY","origin","scale","skew","console","warn","tr","or","sc","sk","transformToMatrix","transform","t","e","error","extractTransform"],"mappings":"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","sourcesContent":["import { append, appendTransform, identity, reset, toArray } from '../Matrix2D';\nimport { parse } from './transform';\nimport { NumberProp, TransformedProps, TransformProps } from './types';\n\nfunction appendTransformProps(props: TransformedProps) {\n  const {\n    x,\n    y,\n    originX,\n    originY,\n    scaleX,\n    scaleY,\n    rotation,\n    skewX,\n    skewY,\n  } = props;\n  appendTransform(\n    x + originX,\n    y + originY,\n    scaleX,\n    scaleY,\n    rotation,\n    skewX,\n    skewY,\n    originX,\n    originY,\n  );\n}\n\nfunction universal2axis(\n  universal: NumberProp | (NumberProp)[] | undefined,\n  axisX: NumberProp | void,\n  axisY: NumberProp | void,\n  defaultValue?: number,\n): [number, number] {\n  let x;\n  let y;\n  if (typeof universal === 'number') {\n    x = y = universal;\n  } else if (typeof universal === 'string') {\n    const coords = universal.split(/\\s*,\\s*/);\n    if (coords.length === 2) {\n      x = +coords[0];\n      y = +coords[1];\n    } else if (coords.length === 1) {\n      x = y = +coords[0];\n    }\n  } else if (Array.isArray(universal)) {\n    if (universal.length === 2) {\n      x = +universal[0];\n      y = +universal[1];\n    } else if (universal.length === 1) {\n      x = y = +universal[0];\n    }\n  }\n\n  axisX = +axisX;\n  if (!isNaN(axisX)) {\n    x = axisX;\n  }\n\n  axisY = +axisY;\n  if (!isNaN(axisY)) {\n    y = axisY;\n  }\n\n  return [x || defaultValue || 0, y || defaultValue || 0];\n}\n\nexport function props2transform(props: TransformProps): TransformedProps {\n  const {\n    rotation = 0,\n    translate,\n    translateX,\n    translateY,\n    origin,\n    originX,\n    originY,\n    scale,\n    scaleX,\n    scaleY,\n    skew,\n    skewX,\n    skewY,\n    x,\n    y,\n  } = props;\n\n  if (Array.isArray(x) || Array.isArray(y)) {\n    console.warn(\n      'Passing SvgLengthList to x or y attribute where SvgLength expected',\n    );\n  }\n  const tr = universal2axis(\n    translate,\n    translateX || (Array.isArray(x) ? x[0] : x),\n    translateY || (Array.isArray(y) ? y[0] : y),\n  );\n  const or = universal2axis(origin, originX, originY);\n  const sc = universal2axis(scale, scaleX, scaleY, 1);\n  const sk = universal2axis(skew, skewX, skewY);\n\n  return {\n    rotation: +rotation || 0,\n    originX: or[0],\n    originY: or[1],\n    scaleX: sc[0],\n    scaleY: sc[1],\n    skewX: sk[0],\n    skewY: sk[1],\n    x: tr[0],\n    y: tr[1],\n  };\n}\n\nexport function transformToMatrix(\n  props: TransformedProps,\n  transform: number[] | string | TransformProps | void | undefined,\n): [number, number, number, number, number, number] {\n  reset();\n  appendTransformProps(props);\n\n  if (transform) {\n    if (Array.isArray(transform)) {\n      if (typeof transform[0] === 'number') {\n        append(\n          transform[0],\n          transform[1],\n          transform[2],\n          transform[3],\n          transform[4],\n          transform[5],\n        );\n      }\n      // noop for react-native transform arrays, let animated handle them\n    } else if (typeof transform === 'string') {\n      try {\n        const t = parse(transform);\n        append(t[0], t[3], t[1], t[4], t[2], t[5]);\n      } catch (e) {\n        console.error(e);\n      }\n    } else {\n      appendTransformProps(props2transform(transform));\n    }\n  }\n\n  return toArray();\n}\n\nexport default function extractTransform(\n  props: number[] | string | TransformProps,\n) {\n  if (Array.isArray(props)) {\n    return props;\n  }\n  if (typeof props === 'string') {\n    try {\n      const t = parse(props);\n      return [t[0], t[3], t[1], t[4], t[2], t[5]];\n    } catch (e) {\n      console.error(e);\n      return identity;\n    }\n  }\n  return transformToMatrix(props2transform(props), props.transform);\n}\n"]}