{"version":3,"sources":["Image.tsx"],"names":["spacesRegExp","SvgImage","props","preserveAspectRatio","x","y","width","height","xlinkHref","href","modes","trim","split","align","meetOrSlice","refMethod","meetOrSliceTypes","alignEnum","Image","resolveAssetSource","uri","Shape","displayName","defaultProps","RNSVGImage"],"mappings":"guBAAA,oDACA,yCAKA,6DACA,yDAEA,uD,yFAEA,GAAMA,CAAAA,YAAY,CAAG,KAArB,C,GAEqBC,CAAAA,Q,qTAmBV,IACCC,CAAAA,KADD,CACW,IADX,CACCA,KADD,IAGLC,CAAAA,mBAHK,CAUHD,KAVG,CAGLC,mBAHK,CAILC,CAJK,CAUHF,KAVG,CAILE,CAJK,CAKLC,CALK,CAUHH,KAVG,CAKLG,CALK,CAMLC,KANK,CAUHJ,KAVG,CAMLI,KANK,CAOLC,MAPK,CAUHL,KAVG,CAOLK,MAPK,CAQLC,SARK,CAUHN,KAVG,CAQLM,SARK,aAUHN,KAVG,CASLO,IATK,CASLA,IATK,sBASED,SATF,aAWP,GAAME,CAAAA,KAAK,CAAGP,mBAAmB,CAC7BA,mBAAmB,CAACQ,IAApB,GAA2BC,KAA3B,CAAiCZ,YAAjC,CAD6B,CAE7B,EAFJ,CAGA,GAAMa,CAAAA,KAAK,CAAGH,KAAK,CAAC,CAAD,CAAnB,CACA,GAAMI,CAAAA,WAA2D,CAC/DJ,KAAK,CAAC,CAAD,CADP,CAEA,MACE,8BAAC,UAAD,wBACE,GAAG,CAAE,KAAKK,SADZ,EAEM,4BAAU,IAAV,CAAgBb,KAAhB,CAFN,EAGE,CAAC,CAAEE,CAHL,CAIE,CAAC,CAAEC,CAJL,CAKE,KAAK,CAAEC,KALT,CAME,MAAM,CAAEC,MANV,CAOE,WAAW,CAAES,iCAAiBF,WAAjB,GAAiC,CAPhD,CAQE,KAAK,CAAEG,0BAAUJ,KAAV,GAAoB,UAR7B,CASE,GAAG,CACD,CAACJ,IAAD,CACI,IADJ,CAEIS,mBAAMC,kBAAN,CACE,MAAOV,CAAAA,IAAP,GAAgB,QAAhB,CAA2B,CAAEW,GAAG,CAAEX,IAAP,CAA3B,CAA2CA,IAD7C,CAZR,kDADF,CAmBD,C,sBAvDmCY,e,2BAAjBpB,Q,CASZqB,W,CAAc,O,CATFrB,Q,CAWZsB,Y,CAAe,CACpBnB,CAAC,CAAE,CADiB,CAEpBC,CAAC,CAAE,CAFiB,CAGpBC,KAAK,CAAE,CAHa,CAIpBC,MAAM,CAAE,CAJY,CAKpBJ,mBAAmB,CAAE,eALD,C,CA+CjB,GAAMqB,CAAAA,UAAU,CAAG,wCAAuB,YAAvB,CAAnB,C","sourcesContent":["import React from 'react';\nimport {\n  Image,\n  ImageSourcePropType,\n  requireNativeComponent,\n} from 'react-native';\nimport { meetOrSliceTypes, alignEnum } from '../lib/extract/extractViewBox';\nimport { withoutXY } from '../lib/extract/extractProps';\nimport { NumberProp } from '../lib/extract/types';\nimport Shape from './Shape';\n\nconst spacesRegExp = /\\s+/;\n\nexport default class SvgImage extends Shape<{\n  preserveAspectRatio?: string;\n  x?: NumberProp;\n  y?: NumberProp;\n  width?: NumberProp;\n  height?: NumberProp;\n  xlinkHref?: string | number | ImageSourcePropType;\n  href?: string | number | ImageSourcePropType;\n}> {\n  static displayName = 'Image';\n\n  static defaultProps = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n    preserveAspectRatio: 'xMidYMid meet',\n  };\n\n  render() {\n    const { props } = this;\n    const {\n      preserveAspectRatio,\n      x,\n      y,\n      width,\n      height,\n      xlinkHref,\n      href = xlinkHref,\n    } = props;\n    const modes = preserveAspectRatio\n      ? preserveAspectRatio.trim().split(spacesRegExp)\n      : [];\n    const align = modes[0];\n    const meetOrSlice: 'meet' | 'slice' | 'none' | string | undefined =\n      modes[1];\n    return (\n      <RNSVGImage\n        ref={this.refMethod}\n        {...withoutXY(this, props)}\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        meetOrSlice={meetOrSliceTypes[meetOrSlice] || 0}\n        align={alignEnum[align] || 'xMidYMid'}\n        src={\n          !href\n            ? null\n            : Image.resolveAssetSource(\n                typeof href === 'string' ? { uri: href } : href,\n              )\n        }\n      />\n    );\n  }\n}\n\nexport const RNSVGImage = requireNativeComponent('RNSVGImage');\n"]}