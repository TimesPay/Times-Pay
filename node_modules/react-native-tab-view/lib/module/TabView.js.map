{"version":3,"sources":["TabView.tsx"],"names":["React","StyleSheet","View","Animated","TabBar","SceneView","Pager","TabView","state","layout","width","height","props","initialLayout","jumpToIndex","index","navigationState","onIndexChange","handleLayout","e","nativeEvent","setState","positionListener","position","onSwipeStart","onSwipeEnd","lazy","lazyPreloadDistance","removeClippedSubviews","keyboardDismissMode","swipeEnabled","swipeVelocityImpact","timingConfig","springConfig","tabBarPosition","renderTabBar","renderScene","renderLazyPlaceholder","sceneContainerStyle","style","gestureHandlerProps","springVelocityScale","renderPager","styles","pager","children","render","addListener","removeListener","jumpTo","sceneRendererProps","set","routes","map","route","i","key","loading","Component","defaultProps","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport TabBar, { Props as TabBarProps } from './TabBar';\nimport SceneView from './SceneView';\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  SceneRendererProps,\n  PagerCommonProps,\n} from './types';\nimport Pager, { Props as ChildProps } from './Pager';\n\ntype Props<T extends Route> = PagerCommonProps & {\n  position?: Animated.Value<number>;\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  renderScene: (\n    props: SceneRendererProps & {\n      route: T;\n    }\n  ) => React.ReactNode;\n  renderLazyPlaceholder: (props: { route: T }) => React.ReactNode;\n  renderTabBar: (\n    props: SceneRendererProps & {\n      navigationState: NavigationState<T>;\n    }\n  ) => React.ReactNode;\n  tabBarPosition: 'top' | 'bottom';\n  initialLayout?: { width?: number; height?: number };\n  lazy: boolean;\n  lazyPreloadDistance: number;\n  removeClippedSubviews?: boolean;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\n  renderPager: (props: ChildProps<T>) => React.ReactNode;\n};\n\ntype State = {\n  layout: Layout;\n};\n\nexport default class TabView<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    tabBarPosition: 'top',\n    renderTabBar: <P extends Route>(props: TabBarProps<P>) => (\n      <TabBar {...props} />\n    ),\n    renderLazyPlaceholder: () => null,\n    keyboardDismissMode: 'auto',\n    swipeEnabled: true,\n    lazy: false,\n    lazyPreloadDistance: 0,\n    removeClippedSubviews: false,\n    springConfig: {},\n    timingConfig: {},\n    gestureHandlerProps: {},\n    renderPager: (props: ChildProps<any>) => <Pager {...props} />,\n  };\n\n  state = {\n    layout: { width: 0, height: 0, ...this.props.initialLayout },\n  };\n\n  private jumpToIndex = (index: number) => {\n    if (index !== this.props.navigationState.index) {\n      this.props.onIndexChange(index);\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n      },\n    });\n  };\n\n  render() {\n    const {\n      position: positionListener,\n      onSwipeStart,\n      onSwipeEnd,\n      navigationState,\n      lazy,\n      lazyPreloadDistance,\n      removeClippedSubviews,\n      keyboardDismissMode,\n      swipeEnabled,\n      swipeVelocityImpact,\n      timingConfig,\n      springConfig,\n      tabBarPosition,\n      renderTabBar,\n      renderScene,\n      renderLazyPlaceholder,\n      sceneContainerStyle,\n      style,\n      gestureHandlerProps,\n      springVelocityScale,\n      renderPager,\n    } = this.props;\n    const { layout } = this.state;\n\n    return (\n      <View onLayout={this.handleLayout} style={[styles.pager, style]}>\n        {renderPager({\n          navigationState,\n          layout,\n          keyboardDismissMode,\n          swipeEnabled,\n          swipeVelocityImpact,\n          timingConfig,\n          springConfig,\n          onSwipeStart,\n          onSwipeEnd,\n          onIndexChange: this.jumpToIndex,\n          springVelocityScale,\n          removeClippedSubviews,\n          gestureHandlerProps,\n          children: ({\n            position,\n            render,\n            addListener,\n            removeListener,\n            jumpTo,\n          }) => {\n            // All of the props here must not change between re-renders\n            // This is crucial to optimizing the routes with PureComponent\n            const sceneRendererProps = {\n              position,\n              layout,\n              jumpTo,\n            };\n\n            return (\n              <React.Fragment>\n                {positionListener ? (\n                  <Animated.Code\n                    exec={Animated.set(positionListener, position)}\n                  />\n                ) : null}\n                {tabBarPosition === 'top' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n                {render(\n                  navigationState.routes.map((route, i) => {\n                    return (\n                      <SceneView\n                        {...sceneRendererProps}\n                        addListener={addListener}\n                        removeListener={removeListener}\n                        key={route.key}\n                        index={i}\n                        lazy={lazy}\n                        lazyPreloadDistance={lazyPreloadDistance}\n                        navigationState={navigationState}\n                        style={sceneContainerStyle}\n                      >\n                        {({ loading }) =>\n                          loading\n                            ? renderLazyPlaceholder({ route })\n                            : renderScene({\n                                ...sceneRendererProps,\n                                route,\n                              })\n                        }\n                      </SceneView>\n                    );\n                  })\n                )}\n                {tabBarPosition === 'bottom' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n              </React.Fragment>\n            );\n          },\n        })}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]}