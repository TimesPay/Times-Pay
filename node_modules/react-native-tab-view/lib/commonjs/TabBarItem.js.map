{"version":3,"sources":["TabBarItem.tsx"],"names":["DEFAULT_ACTIVE_COLOR","DEFAULT_INACTIVE_COLOR","TabBarItem","getActiveOpacity","position","routes","tabIndex","length","inputRange","map","_","i","Animated","interpolate","outputRange","getInactiveOpacity","props","route","navigationState","renderLabelPassed","renderLabel","renderIcon","renderBadge","getLabelText","getTestID","getAccessibilityLabel","getAccessible","activeColor","inactiveColor","pressColor","pressOpacity","labelStyle","style","onLayout","onPress","onLongPress","indexOf","isFocused","index","activeOpacity","inactiveOpacity","icon","label","activeIcon","focused","color","inactiveIcon","styles","opacity","StyleSheet","absoluteFill","undefined","labelText","marginTop","activeLabel","inactiveLabel","tabStyle","flatten","isWidthSet","width","tabContainerStyle","flex","scene","accessibilityLabel","badge","item","React","Component","create","margin","backgroundColor","alignItems","justifyContent","padding","minHeight","top","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  LayoutChangeEvent,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport TouchableItem from './TouchableItem';\nimport { Scene, Route, NavigationState } from './types';\nimport Animated from 'react-native-reanimated';\nimport memoize from './memoize';\n\ntype Props<T extends Route> = {\n  position: Animated.Node<number>;\n  route: T;\n  navigationState: NavigationState<T>;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderIcon?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  onPress: () => void;\n  onLongPress: () => void;\n  labelStyle?: StyleProp<TextStyle>;\n  style: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nconst DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\n\nexport default class TabBarItem<T extends Route> extends React.Component<\n  Props<T>\n> {\n  private getActiveOpacity = memoize(\n    (position: Animated.Node<number>, routes: Route[], tabIndex: number) => {\n      if (routes.length > 1) {\n        const inputRange = routes.map((_, i) => i);\n\n        return Animated.interpolate(position, {\n          inputRange,\n          outputRange: inputRange.map(i => (i === tabIndex ? 1 : 0)),\n        });\n      } else {\n        return 1;\n      }\n    }\n  );\n\n  private getInactiveOpacity = memoize((position, routes, tabIndex) => {\n    if (routes.length > 1) {\n      const inputRange = routes.map((_: Route, i: number) => i);\n\n      return Animated.interpolate(position, {\n        inputRange,\n        outputRange: inputRange.map((i: number) => (i === tabIndex ? 0 : 1)),\n      });\n    } else {\n      return 0;\n    }\n  });\n\n  render() {\n    const {\n      route,\n      position,\n      navigationState,\n      renderLabel: renderLabelPassed,\n      renderIcon,\n      renderBadge,\n      getLabelText,\n      getTestID,\n      getAccessibilityLabel,\n      getAccessible,\n      activeColor = DEFAULT_ACTIVE_COLOR,\n      inactiveColor = DEFAULT_INACTIVE_COLOR,\n      pressColor,\n      pressOpacity,\n      labelStyle,\n      style,\n      onLayout,\n      onPress,\n      onLongPress,\n    } = this.props;\n\n    const tabIndex = navigationState.routes.indexOf(route);\n    const isFocused = navigationState.index === tabIndex;\n\n    const activeOpacity = this.getActiveOpacity(\n      position,\n      navigationState.routes,\n      tabIndex\n    );\n    const inactiveOpacity = this.getInactiveOpacity(\n      position,\n      navigationState.routes,\n      tabIndex\n    );\n\n    let icon: React.ReactNode | null = null;\n    let label: React.ReactNode | null = null;\n\n    if (renderIcon) {\n      const activeIcon = renderIcon({\n        route,\n        focused: true,\n        color: activeColor,\n      });\n      const inactiveIcon = renderIcon({\n        route,\n        focused: false,\n        color: inactiveColor,\n      });\n\n      if (inactiveIcon != null && activeIcon != null) {\n        icon = (\n          <View style={styles.icon}>\n            <Animated.View style={{ opacity: inactiveOpacity }}>\n              {inactiveIcon}\n            </Animated.View>\n            <Animated.View\n              style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n            >\n              {activeIcon}\n            </Animated.View>\n          </View>\n        );\n      }\n    }\n\n    const renderLabel =\n      renderLabelPassed !== undefined\n        ? renderLabelPassed\n        : ({ route, color }: { route: T; color: string }) => {\n            const labelText = getLabelText({ route });\n\n            if (typeof labelText === 'string') {\n              return (\n                <Animated.Text\n                  style={[\n                    styles.label,\n                    icon ? { marginTop: 0 } : null,\n                    { color },\n                    labelStyle,\n                  ]}\n                >\n                  {labelText}\n                </Animated.Text>\n              );\n            }\n\n            return labelText;\n          };\n\n    if (renderLabel) {\n      const activeLabel = renderLabel({\n        route,\n        focused: true,\n        color: activeColor,\n      });\n      const inactiveLabel = renderLabel({\n        route,\n        focused: false,\n        color: inactiveColor,\n      });\n\n      label = (\n        <View>\n          <Animated.View style={{ opacity: inactiveOpacity }}>\n            {inactiveLabel}\n          </Animated.View>\n          <Animated.View\n            style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n          >\n            {activeLabel}\n          </Animated.View>\n        </View>\n      );\n    }\n\n    const tabStyle = StyleSheet.flatten(style);\n    const isWidthSet = tabStyle && tabStyle.width !== undefined;\n    const tabContainerStyle: ViewStyle | null = isWidthSet ? null : { flex: 1 };\n\n    const scene = { route };\n\n    let accessibilityLabel = getAccessibilityLabel(scene);\n\n    accessibilityLabel =\n      typeof accessibilityLabel !== 'undefined'\n        ? accessibilityLabel\n        : getLabelText(scene);\n\n    const badge = renderBadge ? renderBadge(scene) : null;\n\n    return (\n      <TouchableItem\n        borderless\n        testID={getTestID(scene)}\n        accessible={getAccessible(scene)}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={isFocused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={isFocused ? ['selected'] : []}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        delayPressIn={0}\n        onLayout={onLayout}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        style={tabContainerStyle}\n      >\n        <View pointerEvents=\"none\" style={[styles.item, tabStyle]}>\n          {icon}\n          {label}\n          {badge != null ? <View style={styles.badge}>{badge}</View> : null}\n        </View>\n      </TouchableItem>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n  icon: {\n    margin: 2,\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48,\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n  },\n});\n"]}