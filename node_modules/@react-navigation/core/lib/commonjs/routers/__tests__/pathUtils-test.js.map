{"version":3,"sources":["pathUtils-test.js"],"names":["it","path","params","expect","toBe","toEqual","asdf","dude","RegExp","related"],"mappings":"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","sourcesContent":["import { urlToPathAndParams } from '../pathUtils';\n\nit('urlToPathAndParams empty', () => {\n  const { path, params } = urlToPathAndParams('foo://');\n  expect(path).toBe('');\n  expect(params).toEqual({});\n});\n\nit('urlToPathAndParams empty params', () => {\n  const { path, params } = urlToPathAndParams('foo://foo/bar/b');\n  expect(path).toBe('foo/bar/b');\n  expect(params).toEqual({});\n});\n\nit('urlToPathAndParams trailing slash', () => {\n  const { path, params } = urlToPathAndParams('foo://foo/bar/');\n  expect(path).toBe('foo/bar');\n  expect(params).toEqual({});\n});\n\nit('urlToPathAndParams with params', () => {\n  const { path, params } = urlToPathAndParams('foo://foo/bar?asdf=1&dude=foo');\n  expect(path).toBe('foo/bar');\n  expect(params).toEqual({ asdf: '1', dude: 'foo' });\n});\n\nit('urlToPathAndParams with custom delimeter string', () => {\n  const { path, params } = urlToPathAndParams(\n    'https://example.com/foo/bar?asdf=1',\n    'https://example.com/'\n  );\n  expect(path).toBe('foo/bar');\n  expect(params).toEqual({ asdf: '1' });\n});\n\nit('urlToPathAndParams with custom delimeter RegExp', () => {\n  const { path, params } = urlToPathAndParams(\n    'https://example.com/foo/bar?asdf=1',\n    new RegExp('https://example.com/')\n  );\n  expect(path).toBe('foo/bar');\n  expect(params).toEqual({ asdf: '1' });\n});\n\nit('urlToPathAndParams with duplicate prefix in query parameters', () => {\n  const { path, params } = urlToPathAndParams(\n    'example://whatever?related=example://something',\n    'example://'\n  );\n  expect(path).toBe('whatever');\n  expect(params).toEqual({ related: 'example://something' });\n});\n\nit('urlToPathAndParams with array of custom delimiters, should use first match', () => {\n  const { path, params } = urlToPathAndParams(\n    'https://example.com/foo/bar?asdf=1',\n    ['baz', 'https://example.com/', 'https://example.com/foo']\n  );\n  expect(path).toBe('foo/bar');\n  expect(params).toEqual({ asdf: '1' });\n});\n\nit('urlToPathAndParams with array of custom delimiters where none match, should resort to default delimiter', () => {\n  const { path, params } = urlToPathAndParams('foo://foo/bar?asdf=1', [\n    'baz',\n    'bazzlefraz',\n  ]);\n  expect(path).toBe('foo/bar');\n  expect(params).toEqual({ asdf: '1' });\n});\n"]}