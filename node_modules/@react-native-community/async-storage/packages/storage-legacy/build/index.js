"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactNative = require("react-native");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function convertErrors(errs) {
  if (!errs) {
    return null;
  }

  return Array.isArray(errs) ? errs.filter(e => !!e) : [errs];
}

function checkValidInput(usedKey, value) {
  const isValuePassed = arguments.length > 1;

  if (typeof usedKey !== 'string') {
    console.warn(`[AsyncStorageLegacy] Using "${typeof usedKey}" type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\nKey passed: ${usedKey}\n`);

    if (isValuePassed && typeof value !== 'string') {
      if (value == null) {
        throw new Error(`[AsyncStorageLegacy] Passing "null" or "undefined" as value is not supported. If you need to remove a value, use ".removeSingle" method instead.\nPassed value: ${value}\nPassed key: ${usedKey}\n`);
      } else {
        console.warn(`[AsyncStorageLegacy] The value for key "${usedKey}" is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\nPassed value: ${value}\nPassed key: ${usedKey}\n`);
      }
    }
  }
}

class LegacyAsyncStorage {
  constructor() {
    _defineProperty(this, "_asyncStorageNativeModule", void 0);

    this._asyncStorageNativeModule = _reactNative.NativeModules.RNC_AsyncSQLiteDBStorage || _reactNative.NativeModules.RNCAsyncStorage;

    if (!this._asyncStorageNativeModule) {
      throw new Error('[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.');
    }
  }

  async getSingle(key, opts) {
    if (opts) {// noop
    }

    checkValidInput(key);
    return new Promise((resolve, reject) => {
      this._asyncStorageNativeModule.multiGet([key], function (errors, result) {
        const value = result && result[0] && result[0][1] || null;
        const errs = convertErrors(errors);

        if (errs && errs.length) {
          reject(errs[0]);
        } else {
          resolve(value);
        }
      });
    });
  }

  async setSingle(key, value, opts) {
    if (opts) {// noop
    }

    checkValidInput(key, value);
    return new Promise((resolve, reject) => {
      this._asyncStorageNativeModule.multiSet([[key, value]], function (errors) {
        const errs = convertErrors(errors);

        if (errs && errs.length) {
          reject(errs[0]);
        } else {
          resolve();
        }
      });
    });
  }

  async getMany(keys, opts) {
    if (opts) {// noop
    }

    keys.forEach(checkValidInput);
    return new Promise((resolve, reject) => {
      this._asyncStorageNativeModule.multiGet(keys, function (errors, result) {
        const value = result.reduce((acc, current) => {
          const key = current[0];
          const val = current[1] || null;
          return _objectSpread({}, acc, {
            [key]: val
          });
        }, {});
        const errs = convertErrors(errors);

        if (errs && errs.length) {
          reject(errs[0]);
        } else {
          resolve(value);
        }
      });
    });
  }

  async setMany(values, opts) {
    if (opts) {// noop
    }

    values.forEach(keyValue => {
      Object.keys(keyValue).forEach(key => {
        checkValidInput(key, keyValue[key]);
      });
    });
    return new Promise((resolve, reject) => {
      const valuesArray = values.map(entry => {
        return [Object.keys(entry)[0], entry];
      });

      this._asyncStorageNativeModule.multiSet([valuesArray], function (errors) {
        const errs = convertErrors(errors);

        if (errs && errs.length) {
          reject(errs[0]);
        } else {
          resolve();
        }
      });
    });
  }

  async removeSingle(key, opts) {
    if (opts) {// noop
    }

    checkValidInput(key);
    return new Promise((resolve, reject) => {
      this._asyncStorageNativeModule.multiRemove([key], function (errors) {
        const errs = convertErrors(errors);

        if (errs && errs.length) {
          reject(errs[0]);
        } else {
          resolve();
        }
      });
    });
  }

  async removeMany(keys, opts) {
    if (opts) {// noop
    }

    keys.forEach(checkValidInput);
    return new Promise((resolve, reject) => {
      this._asyncStorageNativeModule.multiRemove(keys, function (errors) {
        const errs = convertErrors(errors);

        if (errs && errs.length) {
          reject(errs[0]);
        } else {
          resolve();
        }
      });
    });
  }

  async getKeys(opts) {
    if (opts) {// noop
    }

    return new Promise((resolve, reject) => {
      this._asyncStorageNativeModule.getAllKeys(function (errors, keys) {
        const err = convertErrors(errors);

        if (err && err.length) {
          reject(err[0]);
        } else {
          resolve(keys);
        }
      });
    });
  }

  async dropStorage(opts) {
    if (opts) {// noop
    }

    return new Promise((resolve, reject) => {
      this._asyncStorageNativeModule.clear(function (error) {
        const err = convertErrors(Array.isArray(error) ? error : [error]);

        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  }

}

exports.default = LegacyAsyncStorage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJjb252ZXJ0RXJyb3JzIiwiZXJycyIsIkFycmF5IiwiaXNBcnJheSIsImZpbHRlciIsImUiLCJjaGVja1ZhbGlkSW5wdXQiLCJ1c2VkS2V5IiwidmFsdWUiLCJpc1ZhbHVlUGFzc2VkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiY29uc29sZSIsIndhcm4iLCJFcnJvciIsIkxlZ2FjeUFzeW5jU3RvcmFnZSIsImNvbnN0cnVjdG9yIiwiX2FzeW5jU3RvcmFnZU5hdGl2ZU1vZHVsZSIsIk5hdGl2ZU1vZHVsZXMiLCJSTkNfQXN5bmNTUUxpdGVEQlN0b3JhZ2UiLCJSTkNBc3luY1N0b3JhZ2UiLCJnZXRTaW5nbGUiLCJrZXkiLCJvcHRzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJtdWx0aUdldCIsImVycm9ycyIsInJlc3VsdCIsInNldFNpbmdsZSIsIm11bHRpU2V0IiwiZ2V0TWFueSIsImtleXMiLCJmb3JFYWNoIiwicmVkdWNlIiwiYWNjIiwiY3VycmVudCIsInZhbCIsInNldE1hbnkiLCJ2YWx1ZXMiLCJrZXlWYWx1ZSIsIk9iamVjdCIsInZhbHVlc0FycmF5IiwibWFwIiwiZW50cnkiLCJyZW1vdmVTaW5nbGUiLCJtdWx0aVJlbW92ZSIsInJlbW92ZU1hbnkiLCJnZXRLZXlzIiwiZ2V0QWxsS2V5cyIsImVyciIsImRyb3BTdG9yYWdlIiwiY2xlYXIiLCJlcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVFBOzs7Ozs7QUFRQSxTQUFTQSxhQUFULENBQXVCQyxJQUF2QixFQUFvRDtBQUNsRCxNQUFJLENBQUNBLElBQUwsRUFBVztBQUNULFdBQU8sSUFBUDtBQUNEOztBQUNELFNBQU9DLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixJQUFkLElBQXNCQSxJQUFJLENBQUNHLE1BQUwsQ0FBWUMsQ0FBQyxJQUFJLENBQUMsQ0FBQ0EsQ0FBbkIsQ0FBdEIsR0FBOEMsQ0FBQ0osSUFBRCxDQUFyRDtBQUNE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LFVBQUFBLE1BQU0sQ0FBQ3lCLEdBQUcsQ0FBQyxDQUFELENBQUosQ0FBTjtBQUNELFNBRkQsTUFFTztBQUNMMUIsVUFBQUEsT0FBTyxDQUFDUSxJQUFELENBQVA7QUFDRDtBQUNGLE9BWEQ7QUFZRCxLQWJNLENBQVA7QUFjRDs7QUFFRCxRQUFNbUIsV0FBTixDQUFrQjdCLElBQWxCLEVBQXdEO0FBQ3RELFFBQUlBLElBQUosRUFBVSxDQUNSO0FBQ0Q7O0FBRUQsV0FBTyxJQUFJQyxPQUFKLENBQWtCLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUM1QyxXQUFLVCx5QkFBTCxDQUErQm9DLEtBQS9CLENBQXFDLFVBQVNDLEtBQVQsRUFBOEI7QUFDakUsY0FBTUgsR0FBRyxHQUFHbkQsYUFBYSxDQUFDRSxLQUFLLENBQUNDLE9BQU4sQ0FBY21ELEtBQWQsSUFBdUJBLEtBQXZCLEdBQStCLENBQUNBLEtBQUQsQ0FBaEMsQ0FBekI7O0FBRUEsWUFBSUgsR0FBSixFQUFTO0FBQ1B6QixVQUFBQSxNQUFNLENBQUN5QixHQUFELENBQU47QUFDRCxTQUZELE1BRU87QUFDTDFCLFVBQUFBLE9BQU87QUFDUjtBQUNGLE9BUkQ7QUFTRCxLQVZNLENBQVA7QUFXRDs7QUE3TTZCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFJlYWN0IE5hdGl2ZSBDb21tdW5pdHkuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmltcG9ydCB7TmF0aXZlTW9kdWxlc30gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7XG4gIEVtcHR5U3RvcmFnZU1vZGVsLFxuICBJU3RvcmFnZUJhY2tlbmQsXG4gIFN0b3JhZ2VPcHRpb25zLFxufSBmcm9tICdAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9hc3luYy1zdG9yYWdlJztcbmltcG9ydCB7SUxlZ2FjeU5hdGl2ZU1vZHVsZX0gZnJvbSAnLi4vdHlwZXMvbmF0aXZlTW9kdWxlJztcblxuZnVuY3Rpb24gY29udmVydEVycm9ycyhlcnJzPzogQXJyYXk8RXJyb3I+IHwgRXJyb3IpIHtcbiAgaWYgKCFlcnJzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZXJycykgPyBlcnJzLmZpbHRlcihlID0+ICEhZSkgOiBbZXJyc107XG59XG5cbmZ1bmN0aW9uIGNoZWNrVmFsaWRJbnB1dCh1c2VkS2V5OiBhbnksIHZhbHVlPzogYW55KSB7XG4gIGNvbnN0IGlzVmFsdWVQYXNzZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMTtcblxuICBpZiAodHlwZW9mIHVzZWRLZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgYFtBc3luY1N0b3JhZ2VMZWdhY3ldIFVzaW5nIFwiJHt0eXBlb2YgdXNlZEtleX1cIiB0eXBlIGZvciBrZXkgaXMgbm90IHN1cHBvcnRlZC4gVGhpcyBjYW4gbGVhZCB0byB1bmV4cGVjdGVkIGJlaGF2aW9yL2Vycm9ycy4gVXNlIHN0cmluZyBpbnN0ZWFkLlxcbktleSBwYXNzZWQ6ICR7dXNlZEtleX1cXG5gLFxuICAgICk7XG5cbiAgICBpZiAoaXNWYWx1ZVBhc3NlZCAmJiB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFtBc3luY1N0b3JhZ2VMZWdhY3ldIFBhc3NpbmcgXCJudWxsXCIgb3IgXCJ1bmRlZmluZWRcIiBhcyB2YWx1ZSBpcyBub3Qgc3VwcG9ydGVkLiBJZiB5b3UgbmVlZCB0byByZW1vdmUgYSB2YWx1ZSwgdXNlIFwiLnJlbW92ZVNpbmdsZVwiIG1ldGhvZCBpbnN0ZWFkLlxcblBhc3NlZCB2YWx1ZTogJHt2YWx1ZX1cXG5QYXNzZWQga2V5OiAke3VzZWRLZXl9XFxuYCxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgW0FzeW5jU3RvcmFnZUxlZ2FjeV0gVGhlIHZhbHVlIGZvciBrZXkgXCIke3VzZWRLZXl9XCIgaXMgbm90IGEgc3RyaW5nLiBUaGlzIGNhbiBsZWFkIHRvIHVuZXhwZWN0ZWQgYmVoYXZpb3IvZXJyb3JzLiBDb25zaWRlciBzdHJpbmdpZnlpbmcgaXQuXFxuUGFzc2VkIHZhbHVlOiAke3ZhbHVlfVxcblBhc3NlZCBrZXk6ICR7dXNlZEtleX1cXG5gLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMZWdhY3lBc3luY1N0b3JhZ2U8XG4gIFQgZXh0ZW5kcyBFbXB0eVN0b3JhZ2VNb2RlbCA9IEVtcHR5U3RvcmFnZU1vZGVsXG4+IGltcGxlbWVudHMgSVN0b3JhZ2VCYWNrZW5kPFQ+IHtcbiAgcHJpdmF0ZSByZWFkb25seSBfYXN5bmNTdG9yYWdlTmF0aXZlTW9kdWxlOiBJTGVnYWN5TmF0aXZlTW9kdWxlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2FzeW5jU3RvcmFnZU5hdGl2ZU1vZHVsZSA9XG4gICAgICBOYXRpdmVNb2R1bGVzLlJOQ19Bc3luY1NRTGl0ZURCU3RvcmFnZSB8fCBOYXRpdmVNb2R1bGVzLlJOQ0FzeW5jU3RvcmFnZTtcblxuICAgIGlmICghdGhpcy5fYXN5bmNTdG9yYWdlTmF0aXZlTW9kdWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdbQFJOQy9Bc3luY1N0b3JhZ2VdOiBOYXRpdmVNb2R1bGU6IEFzeW5jU3RvcmFnZSBpcyBudWxsLicsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldFNpbmdsZTxLIGV4dGVuZHMga2V5b2YgVD4oXG4gICAga2V5OiBLLFxuICAgIG9wdHM/OiBTdG9yYWdlT3B0aW9ucyxcbiAgKTogUHJvbWlzZTxUW0tdIHwgbnVsbD4ge1xuICAgIGlmIChvcHRzKSB7XG4gICAgICAvLyBub29wXG4gICAgfVxuICAgIGNoZWNrVmFsaWRJbnB1dChrZXkpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuX2FzeW5jU3RvcmFnZU5hdGl2ZU1vZHVsZS5tdWx0aUdldChba2V5XSwgZnVuY3Rpb24oXG4gICAgICAgIGVycm9yczogQXJyYXk8RXJyb3I+LFxuICAgICAgICByZXN1bHQ6IEFycmF5PFthbnksIFRbS10gfCBudWxsXT4sXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSAocmVzdWx0ICYmIHJlc3VsdFswXSAmJiByZXN1bHRbMF1bMV0pIHx8IG51bGw7XG4gICAgICAgIGNvbnN0IGVycnMgPSBjb252ZXJ0RXJyb3JzKGVycm9ycyk7XG4gICAgICAgIGlmIChlcnJzICYmIGVycnMubGVuZ3RoKSB7XG4gICAgICAgICAgcmVqZWN0KGVycnNbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHNldFNpbmdsZTxLIGV4dGVuZHMga2V5b2YgVD4oXG4gICAga2V5OiBLLFxuICAgIHZhbHVlOiBUW0tdLFxuICAgIG9wdHM/OiBTdG9yYWdlT3B0aW9ucyxcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKG9wdHMpIHtcbiAgICAgIC8vIG5vb3BcbiAgICB9XG4gICAgY2hlY2tWYWxpZElucHV0KGtleSwgdmFsdWUpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuX2FzeW5jU3RvcmFnZU5hdGl2ZU1vZHVsZS5tdWx0aVNldChbW2tleSwgdmFsdWVdXSwgZnVuY3Rpb24oXG4gICAgICAgIGVycm9yczogQXJyYXk8RXJyb3I+LFxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IGVycnMgPSBjb252ZXJ0RXJyb3JzKGVycm9ycyk7XG4gICAgICAgIGlmIChlcnJzICYmIGVycnMubGVuZ3RoKSB7XG4gICAgICAgICAgcmVqZWN0KGVycnNbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBnZXRNYW55PEsgZXh0ZW5kcyBrZXlvZiBUPihcbiAgICBrZXlzOiBBcnJheTxLPixcbiAgICBvcHRzPzogU3RvcmFnZU9wdGlvbnMsXG4gICk6IFByb21pc2U8e1trIGluIEtdOiBUW2tdIHwgbnVsbH0+IHtcbiAgICBpZiAob3B0cykge1xuICAgICAgLy8gbm9vcFxuICAgIH1cbiAgICBrZXlzLmZvckVhY2goY2hlY2tWYWxpZElucHV0KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLl9hc3luY1N0b3JhZ2VOYXRpdmVNb2R1bGUubXVsdGlHZXQoa2V5cywgZnVuY3Rpb24oXG4gICAgICAgIGVycm9yczogQXJyYXk8RXJyb3I+LFxuICAgICAgICByZXN1bHQ6IEFycmF5PFtLLCBUW0tdXT4sXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgdmFsdWU6IHtbayBpbiBLXTogVFtrXX0gPSByZXN1bHQucmVkdWNlPGFueT4oXG4gICAgICAgICAgKGFjYywgY3VycmVudDogW0ssIFRbS11dKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBjdXJyZW50WzBdO1xuICAgICAgICAgICAgY29uc3QgdmFsID0gY3VycmVudFsxXSB8fCBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4uYWNjLFxuICAgICAgICAgICAgICBba2V5XTogdmFsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHt9LFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBlcnJzID0gY29udmVydEVycm9ycyhlcnJvcnMpO1xuICAgICAgICBpZiAoZXJycyAmJiBlcnJzLmxlbmd0aCkge1xuICAgICAgICAgIHJlamVjdChlcnJzWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBzZXRNYW55PEsgZXh0ZW5kcyBrZXlvZiBUPihcbiAgICB2YWx1ZXM6IEFycmF5PFBhcnRpYWw8e1trIGluIEtdOiBUW2tdfT4+LFxuICAgIG9wdHM/OiBTdG9yYWdlT3B0aW9ucyxcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKG9wdHMpIHtcbiAgICAgIC8vIG5vb3BcbiAgICB9XG4gICAgdmFsdWVzLmZvckVhY2goa2V5VmFsdWUgPT4ge1xuICAgICAgKE9iamVjdC5rZXlzKGtleVZhbHVlKSBhcyBBcnJheTxLPikuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBjaGVja1ZhbGlkSW5wdXQoa2V5LCBrZXlWYWx1ZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlc0FycmF5ID0gdmFsdWVzLm1hcChlbnRyeSA9PiB7XG4gICAgICAgIHJldHVybiBbT2JqZWN0LmtleXMoZW50cnkpWzBdIGFzIEssIGVudHJ5XTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fYXN5bmNTdG9yYWdlTmF0aXZlTW9kdWxlLm11bHRpU2V0KFt2YWx1ZXNBcnJheV0sIGZ1bmN0aW9uKFxuICAgICAgICBlcnJvcnM6IEFycmF5PEVycm9yPixcbiAgICAgICkge1xuICAgICAgICBjb25zdCBlcnJzID0gY29udmVydEVycm9ycyhlcnJvcnMpO1xuICAgICAgICBpZiAoZXJycyAmJiBlcnJzLmxlbmd0aCkge1xuICAgICAgICAgIHJlamVjdChlcnJzWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgcmVtb3ZlU2luZ2xlKGtleToga2V5b2YgVCwgb3B0cz86IFN0b3JhZ2VPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKG9wdHMpIHtcbiAgICAgIC8vIG5vb3BcbiAgICB9XG4gICAgY2hlY2tWYWxpZElucHV0KGtleSk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5fYXN5bmNTdG9yYWdlTmF0aXZlTW9kdWxlLm11bHRpUmVtb3ZlKFtrZXldLCBmdW5jdGlvbihcbiAgICAgICAgZXJyb3JzOiBBcnJheTxFcnJvcj4sXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgZXJycyA9IGNvbnZlcnRFcnJvcnMoZXJyb3JzKTtcbiAgICAgICAgaWYgKGVycnMgJiYgZXJycy5sZW5ndGgpIHtcbiAgICAgICAgICByZWplY3QoZXJyc1swXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHJlbW92ZU1hbnkoa2V5czogQXJyYXk8a2V5b2YgVD4sIG9wdHM/OiBTdG9yYWdlT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmIChvcHRzKSB7XG4gICAgICAvLyBub29wXG4gICAgfVxuICAgIGtleXMuZm9yRWFjaChjaGVja1ZhbGlkSW5wdXQpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuX2FzeW5jU3RvcmFnZU5hdGl2ZU1vZHVsZS5tdWx0aVJlbW92ZShrZXlzLCBmdW5jdGlvbihcbiAgICAgICAgZXJyb3JzOiBBcnJheTxFcnJvcj4sXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgZXJycyA9IGNvbnZlcnRFcnJvcnMoZXJyb3JzKTtcbiAgICAgICAgaWYgKGVycnMgJiYgZXJycy5sZW5ndGgpIHtcbiAgICAgICAgICByZWplY3QoZXJyc1swXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGdldEtleXMob3B0cz86IFN0b3JhZ2VPcHRpb25zKTogUHJvbWlzZTxBcnJheTxrZXlvZiBUPj4ge1xuICAgIGlmIChvcHRzKSB7XG4gICAgICAvLyBub29wXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuX2FzeW5jU3RvcmFnZU5hdGl2ZU1vZHVsZS5nZXRBbGxLZXlzKGZ1bmN0aW9uKFxuICAgICAgICBlcnJvcnM6IEFycmF5PEVycm9yPixcbiAgICAgICAga2V5czogQXJyYXk8a2V5b2YgVD4sXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgZXJyID0gY29udmVydEVycm9ycyhlcnJvcnMpO1xuXG4gICAgICAgIGlmIChlcnIgJiYgZXJyLmxlbmd0aCkge1xuICAgICAgICAgIHJlamVjdChlcnJbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoa2V5cyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZHJvcFN0b3JhZ2Uob3B0cz86IFN0b3JhZ2VPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKG9wdHMpIHtcbiAgICAgIC8vIG5vb3BcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5fYXN5bmNTdG9yYWdlTmF0aXZlTW9kdWxlLmNsZWFyKGZ1bmN0aW9uKGVycm9yOiBBcnJheTxFcnJvcj4pIHtcbiAgICAgICAgY29uc3QgZXJyID0gY29udmVydEVycm9ycyhBcnJheS5pc0FycmF5KGVycm9yKSA/IGVycm9yIDogW2Vycm9yXSk7XG5cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==