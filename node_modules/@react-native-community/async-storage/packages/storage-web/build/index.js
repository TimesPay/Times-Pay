"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Copyright (c) React Native Community.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
class WebStorage {
  constructor(sessionStorage = false) {
    _defineProperty(this, "storage", void 0);

    this.storage = sessionStorage ? window.sessionStorage : window.localStorage;
  }

  async getSingle(key, opts) {
    if (opts) {// noop
    }

    return this.storage.getItem(key);
  }

  async setSingle(key, value, opts) {
    if (opts) {// noop
    }

    return this.storage.setItem(key, value);
  }

  async getMany(keys, opts) {
    if (opts) {// noop
    }

    return keys.reduce((storageValues, key) => {
      return _objectSpread({}, storageValues, {
        [key]: this.storage.getItem(key)
      });
    }, {});
  }

  async setMany(values, opts) {
    if (opts) {// noop
    }

    for (let keyValue of values) {
      const key = Object.getOwnPropertyNames(keyValue)[0];

      if (!key) {
        continue;
      }

      this.storage.setItem(key, keyValue[key]);
    }
  }

  async removeSingle(key, opts) {
    if (opts) {// noop
    }

    return this.storage.removeItem(key);
  }

  async removeMany(keys, opts) {
    if (opts) {// noop
    }

    Promise.all(keys.map(k => this.storage.removeItem(k)));
  }

  async getKeys(opts) {
    if (opts) {// noop
    }

    return Object.keys(this.storage);
  }

  async dropStorage(opts) {
    if (opts) {// noop
    }

    const keys = await this.getKeys();
    await this.removeMany(keys);
  }

}

var _default = WebStorage;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJXZWJTdG9yYWdlIiwiY29uc3RydWN0b3IiLCJzZXNzaW9uU3RvcmFnZSIsInN0b3JhZ2UiLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiLCJnZXRTaW5nbGUiLCJrZXkiLCJvcHRzIiwiZ2V0SXRlbSIsInNldFNpbmdsZSIsInZhbHVlIiwic2V0SXRlbSIsImdldE1hbnkiLCJrZXlzIiwicmVkdWNlIiwic3RvcmFnZVZhbHVlcyIsInNldE1hbnkiLCJ2YWx1ZXMiLCJrZXlWYWx1ZSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJyZW1vdmVTaW5nbGUiLCJyZW1vdmVJdGVtIiwicmVtb3ZlTWFueSIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJrIiwiZ2V0S2V5cyIsImRyb3BTdG9yYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOzs7Ozs7O0FBYUEsTUFBTUEsVUFBTixDQUNnQztBQUU5QkMsRUFBQUEsV0FBVyxDQUFDQyxjQUFnQyxHQUFHLEtBQXBDLEVBQTJDO0FBQUE7O0FBQ3BELFNBQUtDLE9BQUwsR0FBZUQsY0FBYyxHQUFHRSxNQUFNLENBQUNGLGNBQVYsR0FBMkJFLE1BQU0sQ0FBQ0MsWUFBL0Q7QUFDRDs7QUFFRCxRQUFNQyxTQUFOLENBQ0VDLEdBREYsRUFFRUMsSUFGRixFQUd3QjtBQUN0QixRQUFJQSxJQUFKLEVBQVUsQ0FDUjtBQUNEOztBQUNELFdBQU8sS0FBS0wsT0FBTCxDQUFhTSxPQUFiLENBQXFCRixHQUFyQixDQUFQO0FBQ0Q7O0FBRUQsUUFBTUcsU0FBTixDQUNFSCxHQURGLEVBRUVJLEtBRkYsRUFHRUgsSUFIRixFQUlpQjtBQUNmLFFBQUlBLElBQUosRUFBVSxDQUNSO0FBQ0Q7O0FBQ0QsV0FBTyxLQUFLTCxPQUFMLENBQWFTLE9BQWIsQ0FBcUJMLEdBQXJCLEVBQTBCSSxLQUExQixDQUFQO0FBQ0Q7O0FBRUQsUUFBTUUsT0FBTixDQUNFQyxJQURGLEVBRUVOLElBRkYsRUFHb0M7QUFDbEMsUUFBSUEsSUFBSixFQUFVLENBQ1I7QUFDRDs7QUFDRCxXQUFPTSxJQUFJLENBQUNDLE1BQUwsQ0FDTCxDQUFDQyxhQUFELEVBQWdCVCxHQUFoQixLQUF3QjtBQUN0QiwrQkFDS1MsYUFETDtBQUVFLFNBQUNULEdBQUQsR0FBTyxLQUFLSixPQUFMLENBQWFNLE9BQWIsQ0FBcUJGLEdBQXJCO0FBRlQ7QUFJRCxLQU5JLEVBT0wsRUFQSyxDQUFQO0FBU0Q7O0FBRUQsUUFBTVUsT0FBTixDQUNFQyxNQURGLEVBRUVWLElBRkYsRUFHaUI7QUFDZixRQUFJQSxJQUFKLEVBQVUsQ0FDUjtBQUNEOztBQUNELFNBQUssSUFBSVcsUUFBVCxJQUFxQkQsTUFBckIsRUFBNkI7QUFDM0IsWUFBTVgsR0FBRyxHQUFHYSxNQUFNLENBQUNDLG1CQUFQLENBQTJCRixRQUEzQixFQUFxQyxDQUFyQyxDQUFaOztBQUNBLFVBQUksQ0FBQ1osR0FBTCxFQUFVO0FBQ1I7QUFDRDs7QUFDRCxXQUFLSixPQUFMLENBQWFTLE9BQWIsQ0FBcUJMLEdBQXJCLEVBQTBCWSxRQUFRLENBQUNaLEdBQUQsQ0FBbEM7QUFDRDtBQUNGOztBQUVELFFBQU1lLFlBQU4sQ0FBbUJmLEdBQW5CLEVBQWlDQyxJQUFqQyxFQUF1RTtBQUNyRSxRQUFJQSxJQUFKLEVBQVUsQ0FDUjtBQUNEOztBQUNELFdBQU8sS0FBS0wsT0FBTCxDQUFhb0IsVUFBYixDQUF3QmhCLEdBQXhCLENBQVA7QUFDRDs7QUFFRCxRQUFNaUIsVUFBTixDQUFpQlYsSUFBakIsRUFBdUNOLElBQXZDLEVBQTZFO0FBQzNFLFFBQUlBLElBQUosRUFBVSxDQUNSO0FBQ0Q7O0FBQ0RpQixJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWVosSUFBSSxDQUFDYSxHQUFMLENBQVNDLENBQUMsSUFBSSxLQUFLekIsT0FBTCxDQUFhb0IsVUFBYixDQUF3QkssQ0FBeEIsQ0FBZCxDQUFaO0FBQ0Q7O0FBRUQsUUFBTUMsT0FBTixDQUFjckIsSUFBZCxFQUE4RDtBQUM1RCxRQUFJQSxJQUFKLEVBQVUsQ0FDUjtBQUNEOztBQUNELFdBQU9ZLE1BQU0sQ0FBQ04sSUFBUCxDQUFZLEtBQUtYLE9BQWpCLENBQVA7QUFDRDs7QUFFRCxRQUFNMkIsV0FBTixDQUFrQnRCLElBQWxCLEVBQXdEO0FBQ3RELFFBQUlBLElBQUosRUFBVSxDQUNSO0FBQ0Q7O0FBQ0QsVUFBTU0sSUFBSSxHQUFHLE1BQU0sS0FBS2UsT0FBTCxFQUFuQjtBQUNBLFVBQU0sS0FBS0wsVUFBTCxDQUFnQlYsSUFBaEIsQ0FBTjtBQUNEOztBQXhGNkI7O2VBMkZqQmQsVSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBSZWFjdCBOYXRpdmUgQ29tbXVuaXR5LlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuaW1wb3J0IHtcbiAgSVN0b3JhZ2VCYWNrZW5kLFxuICBFbXB0eVN0b3JhZ2VNb2RlbCxcbiAgU3RvcmFnZU9wdGlvbnMsXG59IGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L2FzeW5jLXN0b3JhZ2UnO1xuXG5jbGFzcyBXZWJTdG9yYWdlPFQgZXh0ZW5kcyBFbXB0eVN0b3JhZ2VNb2RlbCA9IEVtcHR5U3RvcmFnZU1vZGVsPlxuICBpbXBsZW1lbnRzIElTdG9yYWdlQmFja2VuZDxUPiB7XG4gIHN0b3JhZ2U6IGFueTtcbiAgY29uc3RydWN0b3Ioc2Vzc2lvblN0b3JhZ2U6IGJvb2xlYW4gfCBzdHJpbmcgPSBmYWxzZSkge1xuICAgIHRoaXMuc3RvcmFnZSA9IHNlc3Npb25TdG9yYWdlID8gd2luZG93LnNlc3Npb25TdG9yYWdlIDogd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfVxuXG4gIGFzeW5jIGdldFNpbmdsZTxLIGV4dGVuZHMga2V5b2YgVD4oXG4gICAga2V5OiBLLFxuICAgIG9wdHM/OiBTdG9yYWdlT3B0aW9ucyxcbiAgKTogUHJvbWlzZTxUW0tdIHwgbnVsbD4ge1xuICAgIGlmIChvcHRzKSB7XG4gICAgICAvLyBub29wXG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICB9XG5cbiAgYXN5bmMgc2V0U2luZ2xlPEsgZXh0ZW5kcyBrZXlvZiBUPihcbiAgICBrZXk6IEssXG4gICAgdmFsdWU6IFRbS10sXG4gICAgb3B0cz86IFN0b3JhZ2VPcHRpb25zLFxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAob3B0cykge1xuICAgICAgLy8gbm9vcFxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gIH1cblxuICBhc3luYyBnZXRNYW55PEsgZXh0ZW5kcyBrZXlvZiBUPihcbiAgICBrZXlzOiBBcnJheTxLPixcbiAgICBvcHRzPzogU3RvcmFnZU9wdGlvbnMsXG4gICk6IFByb21pc2U8e1trIGluIEtdOiBUW2tdIHwgbnVsbH0+IHtcbiAgICBpZiAob3B0cykge1xuICAgICAgLy8gbm9vcFxuICAgIH1cbiAgICByZXR1cm4ga2V5cy5yZWR1Y2UoXG4gICAgICAoc3RvcmFnZVZhbHVlcywga2V5KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uc3RvcmFnZVZhbHVlcyxcbiAgICAgICAgICBba2V5XTogdGhpcy5zdG9yYWdlLmdldEl0ZW0oa2V5KSxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICB7fSBhcyB7W2sgaW4gS106IFRba10gfCBudWxsfSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgc2V0TWFueTxLIGV4dGVuZHMga2V5b2YgVD4oXG4gICAgdmFsdWVzOiBBcnJheTxQYXJ0aWFsPHtbayBpbiBLXTogVFtrXX0+PixcbiAgICBvcHRzPzogU3RvcmFnZU9wdGlvbnMsXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmIChvcHRzKSB7XG4gICAgICAvLyBub29wXG4gICAgfVxuICAgIGZvciAobGV0IGtleVZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgY29uc3Qga2V5ID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoa2V5VmFsdWUpWzBdIGFzIEs7XG4gICAgICBpZiAoIWtleSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKGtleSwga2V5VmFsdWVba2V5XSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcmVtb3ZlU2luZ2xlKGtleToga2V5b2YgVCwgb3B0cz86IFN0b3JhZ2VPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKG9wdHMpIHtcbiAgICAgIC8vIG5vb3BcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gIH1cblxuICBhc3luYyByZW1vdmVNYW55KGtleXM6IEFycmF5PGtleW9mIFQ+LCBvcHRzPzogU3RvcmFnZU9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAob3B0cykge1xuICAgICAgLy8gbm9vcFxuICAgIH1cbiAgICBQcm9taXNlLmFsbChrZXlzLm1hcChrID0+IHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKGspKSk7XG4gIH1cblxuICBhc3luYyBnZXRLZXlzKG9wdHM/OiBTdG9yYWdlT3B0aW9ucyk6IFByb21pc2U8QXJyYXk8a2V5b2YgVD4+IHtcbiAgICBpZiAob3B0cykge1xuICAgICAgLy8gbm9vcFxuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5zdG9yYWdlKTtcbiAgfVxuXG4gIGFzeW5jIGRyb3BTdG9yYWdlKG9wdHM/OiBTdG9yYWdlT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmIChvcHRzKSB7XG4gICAgICAvLyBub29wXG4gICAgfVxuICAgIGNvbnN0IGtleXMgPSBhd2FpdCB0aGlzLmdldEtleXMoKTtcbiAgICBhd2FpdCB0aGlzLnJlbW92ZU1hbnkoa2V5cyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2ViU3RvcmFnZTtcbiJdfQ==