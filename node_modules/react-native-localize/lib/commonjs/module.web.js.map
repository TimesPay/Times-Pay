{"version":3,"sources":["module.web.js"],"names":["getCountryCode","languageTagParts","getLocaleFromLanguageTag","languageTag","countryCodeFallback","splitted","split","languageCode","countryCode","isRTL","USES_RTL_LAYOUT","includes","getFirstCountryCode","languageTags","i","length","generateConstants","locales","currencies","forEach","locale","currency","CURRENCIES","find","_","push","numberFormatter","Intl","NumberFormat","dateFormatter","DateTimeFormat","hour","numberSeparators","format","replace","numberFormatSettings","decimalSeparator","groupingSeparator","eveningDate","Date","uses24HourClock","match","calendar","country","temperatureUnit","USES_FAHRENHEIT","timeZone","resolvedOptions","usesMetricSystem","USES_IMPERIAL","handlers","Set","constants","navigator","languages","window","addEventListener","handler"],"mappings":"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","sourcesContent":["// @flow\n\nimport {\n  USES_FAHRENHEIT,\n  USES_IMPERIAL,\n  USES_RTL_LAYOUT,\n  CURRENCIES,\n} from \"./constants\";\n\nimport type { Locale, LocalizationConstants } from \"./types\";\n\nfunction getCountryCode(languageTagParts: string[]): ?string {\n  // overwrite Latin America and Caribbean region\n  return languageTagParts[1] === \"419\" ? \"UN\" : languageTagParts[1];\n}\n\nfunction getLocaleFromLanguageTag(\n  languageTag: string,\n  countryCodeFallback: string,\n): Locale {\n  const splitted = languageTag.split(\"-\");\n  const languageCode = splitted[0];\n  const countryCode = getCountryCode(splitted) || countryCodeFallback;\n\n  return {\n    languageCode: languageCode,\n    countryCode,\n    languageTag: `${languageCode}-${countryCode}`,\n    isRTL: USES_RTL_LAYOUT.includes(languageCode),\n  };\n}\n\nfunction getFirstCountryCode(languageTags: $ReadOnlyArray<string>): ?string {\n  for (let i = 0; i < languageTags.length; i++) {\n    const countryCode = getCountryCode(languageTags[i].split(\"-\"));\n\n    if (countryCode) {\n      return countryCode;\n    }\n  }\n}\n\nfunction generateConstants(\n  languageTags: $ReadOnlyArray<string>,\n): LocalizationConstants {\n  const countryCode = getFirstCountryCode(languageTags);\n  const locales: Locale[] = [];\n  const currencies: string[] = [];\n\n  languageTags.forEach(languageTag => {\n    const locale = getLocaleFromLanguageTag(languageTag, countryCode);\n    const currency = CURRENCIES[locale.countryCode];\n\n    if (!locales.find(_ => _.languageTag === locale.languageTag)) {\n      locales.push(locale);\n    }\n\n    if (currency && !currencies.includes(currency)) {\n      currencies.push(currency);\n    }\n  });\n\n  if (currencies.length === 0) {\n    currencies.push(\"USD\");\n  }\n\n  const numberFormatter = new Intl.NumberFormat(locales[0].languageTag);\n  const dateFormatter = new Intl.DateTimeFormat(locales[0].languageTag, {\n    hour: \"numeric\",\n  });\n\n  const numberSeparators = [\n    ...numberFormatter.format(1000000.1).replace(/\\d/g, \"\"),\n  ];\n  const numberFormatSettings = {\n    decimalSeparator: numberSeparators[numberSeparators.length - 1],\n    groupingSeparator: numberSeparators[0],\n  };\n\n  const eveningDate = new Date(2000, 0, 1, 20);\n  const uses24HourClock = !!dateFormatter.format(eveningDate).match(/am|pm/i);\n\n  return {\n    calendar: \"gregorian\",\n    country: countryCode,\n    currencies,\n    locales,\n    numberFormatSettings,\n    temperatureUnit: USES_FAHRENHEIT.includes(countryCode)\n      ? \"fahrenheit\"\n      : \"celsius\",\n    timeZone: dateFormatter.resolvedOptions().timeZone || \"Etc/UTC\",\n    uses24HourClock,\n    usesMetricSystem: !USES_IMPERIAL.includes(countryCode),\n  };\n}\n\nexport const handlers: Set<Function> = new Set();\nexport let constants: LocalizationConstants = generateConstants(\n  navigator.languages,\n);\n\nwindow.addEventListener(\"languagechange\", () => {\n  constants = generateConstants(navigator.languages);\n  handlers.forEach(handler => handler());\n});\n"]}