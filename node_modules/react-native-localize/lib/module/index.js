import{constants,handlers}from"./module";function logUnsupportedEvent(type){console.error("`"+type+"` is not a valid react-native-localize event");}function getPartialTag(_ref){var languageCode=_ref.languageCode,scriptCode=_ref.scriptCode;return languageCode+(scriptCode?"-"+scriptCode:"");}export function getCalendar(){return constants.calendar;}export function getCountry(){return constants.country;}export function getCurrencies(){return constants.currencies;}export function getLocales(){return constants.locales;}export function getNumberFormatSettings(){return constants.numberFormatSettings;}export function getTemperatureUnit(){return constants.temperatureUnit;}export function getTimeZone(){return constants.timeZone;}export function uses24HourClock(){return constants.uses24HourClock;}export function usesMetricSystem(){return constants.usesMetricSystem;}export function usesAutoDateAndTime(){return constants.usesAutoDateAndTime;}export function usesAutoTimeZone(){return constants.usesAutoTimeZone;}export function addEventListener(type,handler){if(type!=="change"){logUnsupportedEvent(type);}else if(!handlers.has(handler)){handlers.add(handler);}}export function removeEventListener(type,handler){if(type!=="change"){logUnsupportedEvent(type);}else if(handlers.has(handler)){handlers.delete(handler);}}export function findBestAvailableLanguage(languageTags){var locales=getLocales();for(var index=0;index<locales.length;index++){var currentLocale=locales[index];var languageTag=currentLocale.languageTag,languageCode=currentLocale.languageCode,isRTL=currentLocale.isRTL;if(languageTags.includes(languageTag)){return{languageTag:languageTag,isRTL:isRTL};}var partialTag=getPartialTag(currentLocale);var next=locales[index+1];if((!next||partialTag!==getPartialTag(next))&&languageTags.includes(partialTag)){return{languageTag:partialTag,isRTL:isRTL};}if((!next||languageCode!==next.languageCode)&&languageTags.includes(languageCode)){return{languageTag:languageCode,isRTL:isRTL};}}}
//# sourceMappingURL=index.js.map